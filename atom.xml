<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Summary&#39;s Blog</title>
  
  <subtitle>壹百零壹分笑容</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noblestaspiration.net/"/>
  <updated>2018-04-03T13:11:46.381Z</updated>
  <id>http://noblestaspiration.net/</id>
  
  <author>
    <name>Summary</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Crack01</title>
    <link href="http://noblestaspiration.net/2018/04/02/Crack01/"/>
    <id>http://noblestaspiration.net/2018/04/02/Crack01/</id>
    <published>2018-04-02T13:41:07.465Z</published>
    <updated>2018-04-03T13:11:46.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crack01-Acid-burn"><a href="#Crack01-Acid-burn" class="headerlink" title="Crack01-Acid_burn"></a>Crack01-Acid_burn</h1><h2 id="关于题目"><a href="#关于题目" class="headerlink" title="关于题目"></a>关于题目</h2><ul><li>所用工具为OllyDBG，开始想用IDA，但是发现并不适合动态调试（也许将来打脸）。</li><li>题目中需要破解的是两个序列号，一个是一串字符，一个是两串，一串字符的往往是硬编码在程序内部，而两串的可以通过一定计算设计得复杂一点，通过研读指令才能破解。注册机需要完全理解汇编指令才能编写，注册机晚些在补。（截图之后再补2018.4.2）</li></ul><a id="more"></a><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><ul><li>先用ODBG把程序运行起来，通过F8找到第一个弹框所调用的指令，然后F7单步进去，Ctrl+F8进一步定位弹框的位置，这一题，刚开始的弹框可有可无，可以迅速点击确定，然后继续点击Ctrl+F8继续运行，直到弹出下一个Form，这时候选择一个串那个，点进去，随便输一串，然后点击check，这时候，之前标记的断点起到作用了，当你看到call  jmp User32.messagebox的时候，看主模块的堆栈区，找到离他最近的一个返回，右键进入反汇编，然后你会看到略微熟悉的UnIcode编码提醒，最后找到push ebp   mov  ebp  esp，这两条指令，这两条指令是建立栈帧，然后往下寻找，找到JNZ，右键二进制，nop填充，这就破解完了，同理，两串的也是这样破解，但是这样破解唯一一点不好的地方就是不管你输什么进去都能进入，最好的方法是写注册机，这样会强大很多，这个后续一定会补上，截图后面也会补上。</li><li>这里还有第二种方法，比上面方法简单一些，我选用上面方法是因为根据<a href="https://www.52pojie.cn/thread-264393-1-1.html" target="_blank" rel="noopener">参考网址</a> ，我的显示不了低地址的messagebox，无法去查找返回地址，然后我重新在虚拟机装了win7，这时候可以看见了，直接运行到弹出出错的form，然后去查找低地址的messagebox，右键查看调用，在这个call打断，然后继续点击check，这时候会停在断点，然后在主模块区的堆栈区找到第一条返回语句，然后右键查看反汇编，进去找一条JNZ的汇编语句，这时候看左边的实线，会看见跳转到sorry..的Unicode，Unicode语句在右边查看，将这句nop填充即可。</li><li>**这里要注一下JNZ和JZ的区别，JNZ结果不为零则跳转，JZ领标志为1就跳转。</li></ul><ul><li>第一次破解成功，虽然不知道原理，看不懂指令，完全按照网上攻略来的，但是环境可能和网上不太一样，导致利用一天时间摸索才完整完成。</li><li>发现问题：当点击左边两串，先输入一些字符，破解会失败，比如第一行输入123，第二行输入qwe，注册不会成功，这是因为程序本身在设计的时候就不允许输入字符少于三位。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crack01-Acid-burn&quot;&gt;&lt;a href=&quot;#Crack01-Acid-burn&quot; class=&quot;headerlink&quot; title=&quot;Crack01-Acid_burn&quot;&gt;&lt;/a&gt;Crack01-Acid_burn&lt;/h1&gt;&lt;h2 id=&quot;关于题目&quot;&gt;&lt;a href=&quot;#关于题目&quot; class=&quot;headerlink&quot; title=&quot;关于题目&quot;&gt;&lt;/a&gt;关于题目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所用工具为OllyDBG，开始想用IDA，但是发现并不适合动态调试（也许将来打脸）。&lt;/li&gt;
&lt;li&gt;题目中需要破解的是两个序列号，一个是一串字符，一个是两串，一串字符的往往是硬编码在程序内部，而两串的可以通过一定计算设计得复杂一点，通过研读指令才能破解。注册机需要完全理解汇编指令才能编写，注册机晚些在补。（截图之后再补2018.4.2）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="Crack" scheme="http://noblestaspiration.net/tags/Crack/"/>
    
      <category term="反汇编" scheme="http://noblestaspiration.net/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>加密与解密</title>
    <link href="http://noblestaspiration.net/2018/03/30/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    <id>http://noblestaspiration.net/2018/03/30/加密与解密/</id>
    <published>2018-03-30T11:05:07.190Z</published>
    <updated>2018-04-02T14:09:21.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crack工具"><a href="#Crack工具" class="headerlink" title="Crack工具"></a>Crack工具</h1><h2 id="Ollydbg"><a href="#Ollydbg" class="headerlink" title="Ollydbg"></a>Ollydbg</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>F7-单步调试，如果遇到函数调用，会进入函数主体。shift+F7-单步调试，但是遇到中断，调试器会尝试进入被调试程序指定的异常处理。Ctrl+F7-自动步入，断点，异常会停下来，ESC可退出</li><li>F8-单步调试，遇到调用会一次执行完这个函数，shift和Ctrl和F7一样</li></ul><a id="more"></a><ul><li>F9-让程序继续执行，shift和Ctrl和F7一样，alt+F9-执行直到返回用户代码段</li><li>Ctrl+F11-Run跟踪步入</li><li>F12 - 停止程序执行，同时暂停被调试程序的所有线程。</li><li>Ctrl+F12 - Run跟踪步过，一条一条执行命令，但是不进入子函数调用，并把寄存器的信息加入到Run跟踪的存储数据中。Run跟踪不会同步更新CPU窗口。</li><li>Alt+B - 显示断点窗口。在这个窗口中，可以编辑、删除、或跟进到断点处。</li><li>Alt+C - 显示CPU窗口。</li><li>Alt+E - 显示模块列表［list of modules］。</li><li>Alt+K - 显示调用栈［Call stack］窗口。</li><li>Alt+L - 显示日志窗口。</li><li>Alt+M - 显示内存窗口。</li><li>Alt+O - 显示选项对话框［Options dialog］</li><li>Ctrl+P - 显示补丁窗口。</li><li>Ctrl+T - 打开Run跟踪 对话框</li><li>Alt+X - 关闭 OllyDbg。</li><li>Ctrl+E -以二进制（十六进制）格式编辑所选内容。</li><li>Ctrl+F -开始命令搜索。</li><li>Ctrl+G -转到某地址。</li><li>Ctrl+K - 查看与当前函数相关的调用树［Call tree］。在用这个功能之前，必须使用分析代码功能。</li><li>Ctrl+L - 搜索下一个，重复上一次的搜索内容。</li><li>Ctrl+N - 打开当前模块的名称（标签）列表。</li><li>Ctrl+O - 扫描object文件。扫描Object文件。该命令会显示扫描Object文件对话框，您可以在该对话框中选择Object文件或者lib文件，并扫描这个文件，试图找到在实际代码段中用到的目标模块。</li><li>Ctrl+S -命令搜索。</li><li>分号是注释</li></ul><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><ul><li>快捷键<ul><li>j（jump）表示跳转</li><li>o（offset）便是偏移值</li><li>p（procedure）表示子程序，回车或双击可跳</li><li>字符上按X可以打开交叉参考窗口</li><li>M键为重命名，alt+M标记当前位置，Ctrl+M跳到标记位置，选择要跳的位置双击就过去了</li><li>U让所有代码以数据的形式显示出来，C重新分析代码</li><li><code>F12会出现函数执行的流程图</code></li></ul></li><li>图形视图<ul><li>蓝色，顺序执行</li><li>绿色，条件执行（YES）</li><li>红色，条件执行（NO）</li></ul></li><li>文本视图<ul><li>箭头实线表示非条件跳转，虚线表示条件跳转</li><li>向下箭头加上jump表示跳转</li></ul></li><li>IDC，一些反汇编的任务需要IDC的协助，如对代码进行加密程序，可以用IDC先写一段解密代码，在解密后反汇编就可以得到正确的反汇编结果</li></ul><h2 id="汇编相关"><a href="#汇编相关" class="headerlink" title="汇编相关"></a>汇编相关</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul><li>EBP是存取某个时刻的栈顶指针，ESP是一直指向栈顶的指针，以方便对栈的操作</li></ul><h2 id="杂项知识点"><a href="#杂项知识点" class="headerlink" title="杂项知识点"></a>杂项知识点</h2><ul><li>PE—Portable Executable可执行文件</li><li>很多工具在反汇编的时候可能无法正确区分数据和代码，有些程序就是用这个来对抗静态反汇编</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crack工具&quot;&gt;&lt;a href=&quot;#Crack工具&quot; class=&quot;headerlink&quot; title=&quot;Crack工具&quot;&gt;&lt;/a&gt;Crack工具&lt;/h1&gt;&lt;h2 id=&quot;Ollydbg&quot;&gt;&lt;a href=&quot;#Ollydbg&quot; class=&quot;headerlink&quot; title=&quot;Ollydbg&quot;&gt;&lt;/a&gt;Ollydbg&lt;/h2&gt;&lt;h3 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;F7-单步调试，如果遇到函数调用，会进入函数主体。shift+F7-单步调试，但是遇到中断，调试器会尝试进入被调试程序指定的异常处理。Ctrl+F7-自动步入，断点，异常会停下来，ESC可退出&lt;/li&gt;
&lt;li&gt;F8-单步调试，遇到调用会一次执行完这个函数，shift和Ctrl和F7一样&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="Crack" scheme="http://noblestaspiration.net/tags/Crack/"/>
    
      <category term="汇编与反汇编" scheme="http://noblestaspiration.net/tags/%E6%B1%87%E7%BC%96%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C学习笔记</title>
    <link href="http://noblestaspiration.net/2018/03/26/Objective-C%E7%AC%94%E8%AE%B0/"/>
    <id>http://noblestaspiration.net/2018/03/26/Objective-C笔记/</id>
    <published>2018-03-26T13:22:05.673Z</published>
    <updated>2018-04-02T14:19:17.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-C笔记"><a href="#Objective-C笔记" class="headerlink" title="Objective-C笔记"></a>Objective-C笔记</h2><ul><li>.m文件代表的是message，指的是OC的一种主要特性。</li><li>#import是让编译器在头文件中查询定义</li><li>框架是一种聚集在一个单元的部件集合，包含头文件，库，图像，声音文件等，Foundation框架的头文件Foundation.h包含一百多个文件，一旦使用<code>#import&lt;Foundation/Foundation.h&gt;</code>， 那么将会获得全部集合。</li><li>argc是命令行总的参数个数,argv[]是argc个参数，其中第0个参数是程序的全名，以后的参数命令行后面跟的用户输入的参数，char *argv[]是一个字符数组,其大小是int argc,主要用于命令行参数argv[]参数，数组里每个元素代表一个参数</li></ul><a id="more"></a><ul><li><strong>特别的.h文件和.m文件build之前一定要将.h文件右键properties-&gt;advance下的compiler…改为objc，这在环境搭建的blog也有提到</strong></li></ul><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//头文件Fraction.h</span><br><span class="line">#import&lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface Fraction:NSObject</span><br><span class="line">&#123;</span><br><span class="line">  int numerator;</span><br><span class="line">  int denominator;//成员变量，这里是private的字段，数据存储在字段中，修改字段才修改数据。封装起来，保证数据安全。</span><br><span class="line">&#125;</span><br><span class="line">-(void) print;</span><br><span class="line">-(void) setNumerator:(int) n;</span><br><span class="line">-(void) setDenominator:(int) d;</span><br><span class="line">-(int) numerator;</span><br><span class="line">-(int) denominator;//这里是属性，有get和set方法</span><br><span class="line">//.m文件</span><br><span class="line">#import&lt;stdio.h&gt;</span><br><span class="line">#import&quot;Fraction.h&quot;</span><br><span class="line">@implementation Fraction</span><br><span class="line">-(void) print</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%i/%i&quot;,numerator,denominator);</span><br><span class="line">&#125;</span><br><span class="line">-(void) setNumeration:(int) n</span><br><span class="line">&#123;</span><br><span class="line">  numerator=n;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">-(int) denominator</span><br><span class="line">&#123;</span><br><span class="line">  return denominator;//属性中get方法，这样上面print可以访问成员变量</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">//main函数中使用</span><br><span class="line">//头文件中要包含：Fraction.h</span><br><span class="line">Fraction *frac=[[Fraction alloc] init];</span><br><span class="line">[frac print];</span><br><span class="line">[frac setNumeration:1];</span><br><span class="line">[frac release];</span><br><span class="line">//多个参数,-(void)setNumerator:(int) n andDeminator:(int) d;</span><br></pre></td></tr></table></figure><h3 id="构造子，先看一下构造函数和析构函数-的区别。"><a href="#构造子，先看一下构造函数和析构函数-的区别。" class="headerlink" title="构造子，先看一下构造函数和析构函数 的区别。"></a>构造子，先看一下<a href="http://www.runoob.com/cplusplus/cpp-constructor-destructor.html" target="_blank" rel="noopener">构造函数和析构函数</a> 的区别。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//.h里面的声明</span><br><span class="line">-(Fraction*) initWithNumerator:(int)n denomination:(int)d</span><br><span class="line">//.m具体实现方法</span><br><span class="line">-(Fraction*) initWithNumerator:(int)n denomination:(int)d</span><br><span class="line">&#123;</span><br><span class="line">  _self=[super init];</span><br><span class="line">  if(_self)</span><br><span class="line">  &#123;</span><br><span class="line">    [_self setNumerator:n andDenomitor:d];</span><br><span class="line">  &#125;</span><br><span class="line">  return _self;</span><br><span class="line">&#125;//if(_self)等同if(_self!=nil),nil等同于NULL，</span><br><span class="line">//main函数中实现</span><br><span class="line">Fraction *frac3 = [[Fraction alloc] initWithNumerator: 3 denominator: 10];</span><br><span class="line">printf( &quot;Fraction 3 is: &quot; );</span><br><span class="line">[frac3 print];</span><br><span class="line">printf( &quot;\n&quot; );</span><br></pre></td></tr></table></figure><ul><li>self 是指指向自己的指针</li></ul><h3 id="Class-level-access"><a href="#Class-level-access" class="headerlink" title="Class level access"></a>Class level access</h3><ul><li><strong>前面带有减号(-) 的方法为实例方法，必须使用类的实例才可以调用的。对应的有+号， 代表是类的静态方法，不需要实例化即可调用。</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//ClassA.h</span><br><span class="line">#import &lt;Foundation/NSObject.h&gt;</span><br><span class="line">  static int count;</span><br><span class="line">@interface ClassA: NSObject</span><br><span class="line">+(int) initCount;</span><br><span class="line">+(void) initialize;</span><br><span class="line">@end</span><br><span class="line">//ClassA.m</span><br><span class="line">#import &quot;ClassA.h&quot;</span><br><span class="line">@implementation ClassA</span><br><span class="line">-(id) init</span><br><span class="line">&#123;</span><br><span class="line">_self = [super init];</span><br><span class="line">count++;</span><br><span class="line">return _self;</span><br><span class="line">&#125;</span><br><span class="line">+(int) initCount</span><br><span class="line">&#123;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line">+(void) initialize</span><br><span class="line">&#123;</span><br><span class="line">count = 0;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">main.m</span><br><span class="line">#import &quot;ClassA.h&quot;</span><br><span class="line">#import &lt;stdio.h&gt;</span><br><span class="line">int main( int argc, const char *argv[] )</span><br><span class="line">&#123;</span><br><span class="line">ClassA *c1 = [[ClassA alloc] init];</span><br><span class="line">ClassA *c2 = [[ClassA alloc] init];</span><br><span class="line">// print count</span><br><span class="line">printf( &quot;ClassA count: %i\n&quot;, [ClassA initCount] );</span><br><span class="line">ClassA *c3 = [[ClassA alloc] init];</span><br><span class="line">// print count again</span><br><span class="line">printf( &quot;ClassA count: %i\n&quot;, [ClassA initCount] );</span><br><span class="line">[c1 release];</span><br><span class="line">[c2 release];</span><br><span class="line">[c3 release];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">ClassA count: 2</span><br><span class="line">ClassA count: 3</span><br></pre></td></tr></table></figure><ul><li><p><strong>类方法用类名访问，实例方法用示例名访问。静态方法可以直接调用,实例方法要先成生实例,通过实例调用方法，静态速度很快，但是多了会占内存。静态内存是连续的,因为是在程序开始时就生成了,而实例申请的是离散的空间,所以当然没有静态方法快，而且静态内存是有限制的，太多了程序会启动不了。</strong></p></li><li><p><strong>类方法可以计算一个实体被instance几次，还可以共享数据，它不需要访问或者修改某个实例的成员变量。类方法一般用于实现一些工具方法，比如对某个对象进行扩展，或者实现单例。如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。 </strong></p><blockquote><p><code>插入一点:windows要通过各种各样的句柄来标识诸如应用程序实例，窗口，图标菜单等对象。句柄的实际值对程序来讲无光紧要，这个值是用来引用相应对象的。句柄与普通指针的区别在于，指针包含的是引用对象的内存地址，而句柄则是由系统所管理的引用标识，该标识可以被系统重新定位到一个内存地址上。这种间接访问对象的模式增强了系统对引用对象的控制。</code></p></blockquote></li></ul><h3 id="这里留给异常"><a href="#这里留给异常" class="headerlink" title="这里留给异常"></a>这里留给异常</h3><h3 id="继承多态以及其他实体导向功能"><a href="#继承多态以及其他实体导向功能" class="headerlink" title="继承多态以及其他实体导向功能"></a>继承多态以及其他实体导向功能</h3><h4 id="ID类型"><a href="#ID类型" class="headerlink" title="ID类型"></a>ID类型</h4><ul><li>Objective-C有一种id的类型，操作有些像void*，不过它却严格规定只能用在实体上。Objective-C与Java、C++不一样，在调用一个实体的方法时，并不需要知道这个实体的类型。当然，这个方法一定要存在，在称为Objective-C的消息传递。这种动态连接有显而易见的好处。你不需要知道你调用的方法的那个实体是什么类型，如果这个实体对这个消息有反应，那就会调用这个方法。这也不会牵涉到一堆繁琐的类型转换，比如在Java里调用一个整形实体的.intValue()就要先转换，然后才能调用这个方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id number;</span><br><span class="line">number=comp;</span><br><span class="line">[number print];</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>关于<em>_self=[super init]</em> ，下面一段代码</p><ul><li>[super init]的作用：面向对象的体现，先利用父类的init方法为子类实例的父类部分属性初始化。在iOS下，所有的类都继承于NSObject，而NSObject的init方法很简单，就是return _self。当父类的初始化完成之后，即_self不为nil的情况下，就可以开始做子类的初始化了。</li><li>把[_self init]付给_self，防止父类release掉了self指向的空间并重新获得alloc了一块空间，如果[self init]alloc失败，则不执行if语句内容。</li><li>super作为消息接受者的实质：<strong>super并不是真正的指针，[super message]的实质是由self来接受父类的message。</strong>需要注意的是，[super message]中，message方法出现的self为[super message]语境中的self，即子类实例。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_self=[super init];</span><br><span class="line">if(_self)</span><br><span class="line">&#123;</span><br><span class="line">    [_self setWidth:w height:h];</span><br><span class="line">&#125; </span><br><span class="line">return _self;</span><br></pre></td></tr></table></figure><ul><li>重要一点：<strong>if( self = [super init] )这是一种通常的建议写法，赋值并测零只是为了防止超类在初始化过程中发生改变，返回了不同的对象</strong></li></ul><p><strong>注：所有self前面均无_，只是hexo的时候会报错，所以选择加上</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Objective-C笔记&quot;&gt;&lt;a href=&quot;#Objective-C笔记&quot; class=&quot;headerlink&quot; title=&quot;Objective-C笔记&quot;&gt;&lt;/a&gt;Objective-C笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.m文件代表的是message，指的是OC的一种主要特性。&lt;/li&gt;
&lt;li&gt;#import是让编译器在头文件中查询定义&lt;/li&gt;
&lt;li&gt;框架是一种聚集在一个单元的部件集合，包含头文件，库，图像，声音文件等，Foundation框架的头文件Foundation.h包含一百多个文件，一旦使用&lt;code&gt;#import&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/code&gt;， 那么将会获得全部集合。&lt;/li&gt;
&lt;li&gt;argc是命令行总的参数个数,argv[]是argc个参数，其中第0个参数是程序的全名，以后的参数命令行后面跟的用户输入的参数，char *argv[]是一个字符数组,其大小是int argc,主要用于命令行参数argv[]参数，数组里每个元素代表一个参数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://noblestaspiration.net/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="http://noblestaspiration.net/tags/Objective-C/"/>
    
      <category term="languish" scheme="http://noblestaspiration.net/tags/languish/"/>
    
  </entry>
  
  <entry>
    <title>Windows下搭建OC环境</title>
    <link href="http://noblestaspiration.net/2018/03/26/Windows%E4%B8%8B%E6%90%AD%E5%BB%BAOC%E7%8E%AF%E5%A2%83/"/>
    <id>http://noblestaspiration.net/2018/03/26/Windows下搭建OC环境/</id>
    <published>2018-03-26T08:23:07.368Z</published>
    <updated>2018-03-31T01:53:14.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Objective-C编译器"><a href="#安装Objective-C编译器" class="headerlink" title="安装Objective-C编译器"></a>安装Objective-C编译器</h1><p>需安装文件地址：<a href="https://pan.baidu.com/s/1qkS-7_EBuj4ofd9gHtdHcA" target="_blank" rel="noopener">链接</a> ，密码是：lm8y</p><ul><li>先安装OC的编译器，这里使用的是GNUstep，安装次序为：gnustep-msys-system、gnustep-core、gnustep-devel，我安装再d盘，下面路径皆以d盘开始</li><li>接着安装IDE，选择codeblocks作为IDE</li></ul><a id="more"></a><h1 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h1><ul><li>先进入<strong>setting-&gt;Compiler anddebugger…</strong>,进去之后选择<strong>GUN GCC Compiler</strong>，按<strong>copy</strong>按钮，将其重新命名为<strong>GUNstep MinGW Compiler</strong>，如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/1.jpg" alt="第一步"></p><p>这里一定要将<strong>selected compiler</strong>选择到<strong>GUNstep MinGW Compiler</strong>，然后点击<strong>set as default</strong>。勾选如图的两个选项。</p><ul><li>然后在<strong>compiler flags</strong>旁边的<strong>other compiler options</strong>里面添加这句话：<strong>-fconstant-string-class=NSConstantString -std=c99 </strong></li><li>在<strong>linker setting</strong>中添加两个链接，分别链接到<strong>libgnustep-base.dll.a</strong>和<strong>libobjc.dll.a</strong>，我的<strong>GUNstep</strong>是安装在D盘，所以路径依次是：<code>D:\GNUstep\GNUstep\System\Library\Libraries\libgnustep-base.dll.a</code> 和<code>D:\GNUstep\GNUstep\System\Library\Libraries\libobjc.dll.a</code> 如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/2.jpg" alt="链接文件"></p><ul><li>指定搜索目录，<strong>Search directories</strong>，这里有两处需要指定，第一是<strong>compiler</strong>，将其设置为<code>D:\GNUstep\GNUstep\System\Library\Headers</code> 第二处是linker，将其设置为<code>D:\GNUstep\GNUstep\System\Library\Libraries</code> 这两个不能写为同一个路径。如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/3.jpg" alt="设置搜索路径"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/4.jpg" alt="设置搜索路径"></p><h1 id="添加Objective-C文件支持类型"><a href="#添加Objective-C文件支持类型" class="headerlink" title="添加Objective-C文件支持类型"></a>添加Objective-C文件支持类型</h1><ul><li><p>进入<strong>Settings-&gt;Environment…</strong>，选择<strong>Files extension handling</strong> 添加<strong>*.m</strong>。如图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/5.jpg" alt="添加.m文件"></p></li><li><p>然后新建一个项目，在<strong>project-&gt;project tree-&gt;categories…</strong>下面将<strong>*.m</strong>添加到<strong>source</strong>下，一定要注意前面使用<code>;</code> 分号分开的，如下图：</p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/6.jpg" alt="添加.m文件"></p><ul><li>进入<strong>Settings-&gt;Editor…</strong>，选择<strong>Syntaxhighlighting</strong>，点击<strong>Filemasks….</strong>按钮，在弹出框尾部添加*.m 到文件类型。如图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/7.jpg" alt="添加.m文件"></p><ul><li>然后点击<strong>Keywords…</strong>按钮 (紧靠<strong>Filemasks…</strong>按钮) 添加下面<strong>Objective-C</strong>的关键字到<strong>EditKeywords</strong>列表中。如图：</li></ul><blockquote><p><strong>@interface @implementation @end  @class @selector @protocol @public @protected @private id BOOL YES NO SEL nil  NULL self</strong></p></blockquote><p><img src="http://p6flo4av7.bkt.clouddn.com/8.jpg" alt="添加.m文件"></p><p>这就大体完成了。</p><h1 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h1><ul><li>测试代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">int main (int argc, const char *argv[])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    NSAutoreleasePool *pool =[[NSAutoreleasePool alloc] init];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;%@&quot;,@&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">    [pool drain];</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试之前要在工程目录下新建一个.m文件，然后在编译器中右键这个文件，选择两个选项，如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/9.jpg" alt="测试"></p><ul><li>.h文件也必须选择上面这一步，而且在options下面一个选项properties里面，必须这样选择properties-&gt;advanced-&gt;compiler-&gt;variable里面改为objc，这时候编译才能通过</li></ul><p>#一点补充</p><ul><li>关于代码高亮：在<strong>setting-&gt;editor</strong>里面，选择<strong>Syntax highlighting</strong>，然后选择<strong>objective c</strong>，点击filemasks…然后添加*.m，注意，后面加上<code>，</code>号,如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/10.jpg" alt="代码高亮"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Objective-C编译器&quot;&gt;&lt;a href=&quot;#安装Objective-C编译器&quot; class=&quot;headerlink&quot; title=&quot;安装Objective-C编译器&quot;&gt;&lt;/a&gt;安装Objective-C编译器&lt;/h1&gt;&lt;p&gt;需安装文件地址：&lt;a href=&quot;https://pan.baidu.com/s/1qkS-7_EBuj4ofd9gHtdHcA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt; ，密码是：lm8y&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先安装OC的编译器，这里使用的是GNUstep，安装次序为：gnustep-msys-system、gnustep-core、gnustep-devel，我安装再d盘，下面路径皆以d盘开始&lt;/li&gt;
&lt;li&gt;接着安装IDE，选择codeblocks作为IDE&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Stall IDE" scheme="http://noblestaspiration.net/categories/Stall-IDE/"/>
    
    
      <category term="Windows" scheme="http://noblestaspiration.net/tags/Windows/"/>
    
      <category term="Objective-C" scheme="http://noblestaspiration.net/tags/Objective-C/"/>
    
      <category term="GNUstep" scheme="http://noblestaspiration.net/tags/GNUstep/"/>
    
  </entry>
  
  <entry>
    <title>一点makedown</title>
    <link href="http://noblestaspiration.net/2018/03/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-makedown/"/>
    <id>http://noblestaspiration.net/2018/03/15/第一篇文章-makedown/</id>
    <published>2018-03-15T14:17:57.454Z</published>
    <updated>2018-03-30T02:23:34.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先写一点自己可能用得上的语法</p></blockquote><p>有几个#号就是几级标题</p><h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><h4 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h4><blockquote><p>这是&gt;加空格</p><blockquote><p>两个&gt;加空格</p></blockquote></blockquote><a id="more"></a><ul><li>一个<em>号加空格表示强调，可以在句中表示强调不过要以什么符号开始，就以什么结束，例子</em>这个是星号*，如果回车还是一样的格式，不想这样要这个格式，那就再回车一下</li><li><ul><li>回车再*号就会是空心小圆圈</li></ul></li></ul><ul><li>一个-减号也是一个小黑点这样</li></ul><p>像这样-–，***变成一个分隔符</p><hr><p>链接有两种形式：</p><ul><li>行内式：链接可以用[]加上()这样来书写，[]中间写链接内容，()中间写链接地址</li></ul><p>​         <a href="noblestaspiration.net">我博客链接</a></p><ul><li><p>参考式：两个[]连起来</p><p>例子:<a href="noblestaspiration.net" title="mine">我的博客</a></p></li></ul><ul><li>&lt;noblestaspiration.net&gt;   自动链接</li></ul><p>三个`这个符号是代码区，紧跟在三个符号后面的是语言类型，可以写Python或者C啊这些</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="number">111111</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个``中间写的内容会变成其他颜色，但是第一个符号要加上空格</p><p><code>这就是其他颜色</code></p><p>插入图片是![]（）其中[]中填的是图片名称，后面写的是路径加上图片的名称，名称一定要加上类型，比如.jpg什么的，下面插一张图片</p><p><img src="/2018/03/15/第一篇文章-makedown/D:/MyBlog\hexo\source\uploads\123.jpg" alt="123"></p><blockquote class="blockquote-center">这里是内容</blockquote><p>一对&lt;&gt;里面写blockquote class=”blockquote-center”这是搞一个像留言板下面那样的一个区域然后后面再加上一对&lt;&gt;里面写/blockquote这样就行了</p><p>另外\反斜杠可以帮助插其他符号，下面的就是前面已经加上反斜杠了</p><p>+ </p><p>`</p><p>*</p><p>_</p><p>{}</p><p>[]</p><p>()</p><p>#</p><p>+</p><p>-</p><p>.</p><p>!</p><p>多级列表：</p><ul><li>这是第一级<ul><li>在上一行回车再回车之后tab再-加上空格</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先写一点自己可能用得上的语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有几个#号就是几级标题&lt;/p&gt;
&lt;h1 id=&quot;一级&quot;&gt;&lt;a href=&quot;#一级&quot; class=&quot;headerlink&quot; title=&quot;一级&quot;&gt;&lt;/a&gt;一级&lt;/h1&gt;&lt;h2 id=&quot;二级&quot;&gt;&lt;a href=&quot;#二级&quot; class=&quot;headerlink&quot; title=&quot;二级&quot;&gt;&lt;/a&gt;二级&lt;/h2&gt;&lt;h3 id=&quot;三级&quot;&gt;&lt;a href=&quot;#三级&quot; class=&quot;headerlink&quot; title=&quot;三级&quot;&gt;&lt;/a&gt;三级&lt;/h3&gt;&lt;h4 id=&quot;四级&quot;&gt;&lt;a href=&quot;#四级&quot; class=&quot;headerlink&quot; title=&quot;四级&quot;&gt;&lt;/a&gt;四级&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这是&amp;gt;加空格&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个&amp;gt;加空格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://noblestaspiration.net/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="makedown" scheme="http://noblestaspiration.net/tags/makedown/"/>
    
      <category term="基础" scheme="http://noblestaspiration.net/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://noblestaspiration.net/2018/03/15/hello-world/"/>
    <id>http://noblestaspiration.net/2018/03/15/hello-world/</id>
    <published>2018-03-15T12:23:04.812Z</published>
    <updated>2018-03-15T12:23:04.812Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python常用模块集锦</title>
    <link href="http://noblestaspiration.net/2018/03/12/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9B%86%E9%94%A6/"/>
    <id>http://noblestaspiration.net/2018/03/12/Python常用模块集锦/</id>
    <published>2018-03-12T09:51:35.000Z</published>
    <updated>2018-03-19T16:16:53.592Z</updated>
    
    <content type="html"><![CDATA[<p>Python常用模块集锦</p><p>常用模块主要分为以下几类（缺失的后续再补充）：</p><ul><li>时间转换</li><li>时间计算</li><li>序列化和反序列化：<code>json</code>，<code>pickle</code></li><li>编解码：<code>unicode</code>，<code>base64</code></li><li>加解密：<code>md5</code>，<code>sha1</code>，<code>hmac_sha1</code>，<code>aes</code></li><li>常见装饰器：<ul><li>计算执行时间装饰器</li><li>缓存装饰器</li><li>错误重试装饰器</li><li>延迟装饰器</li><li>尾递归优化装饰器</li></ul></li><li><code>ini</code>配置文件读取</li></ul><a id="more"></a><p>代码整合如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on 9/21/17 1:46 PM</span></span><br><span class="line"><span class="string">@author: Chen Liang</span></span><br><span class="line"><span class="string">@function: python常用模块集锦，util.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BEFORE = <span class="number">1</span></span><br><span class="line">LATER = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Python通用单元：不好归类但常用的方法此处添加"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeTransferUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""时间相关的常见转换方法"""</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""时间相关的常见计算方法"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str_to_date</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializeUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""序列化和反序列化：json, pickle"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">json_loads</span><span class="params">(json_str, encoding=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = json.loads(s=json_str, encoding=encoding)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, obj</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">json_dumps</span><span class="params">(obj)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            json_str = json.dumps(obj=obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, json_str</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickle_loads</span><span class="params">(pickle_str)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = pickle.loads(pickle_str)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, obj</span><br><span class="line">        <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickle_dumps</span><span class="params">(obj)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_str = pickle.dumps(obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, pickle_str</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodecUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""编解码相关常见方法：base64 unicode"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base64_encode</span><span class="params">(data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, base64.b64encode(data)</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base64_decode</span><span class="params">(encoded_data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, base64.b64decode(encoded_data)</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_unicode</span><span class="params">(s, encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> s <span class="keyword">if</span> isinstance(s, unicode) <span class="keyword">else</span> unicode(s, encoding)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unicode_to</span><span class="params">(unicode_s, encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> unicode_s.encode(encoding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""加解密相关常见方法： md5 aes"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(str_object)</span>:</span></span><br><span class="line">        <span class="string">"""md5"""</span></span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(str_object)</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_encrypt</span><span class="params">(s, key, salt, mode=AES.MODE_CBC)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        aes加密</span></span><br><span class="line"><span class="string">        :param s: 待加密字符串</span></span><br><span class="line"><span class="string">        :param key: 密钥</span></span><br><span class="line"><span class="string">        :param salt: 盐, 16bit eg. b'0000000101000000'</span></span><br><span class="line"><span class="string">        :param mode: AES模式</span></span><br><span class="line"><span class="string">        :return: 加密后的字符串</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt)</span><br><span class="line">        n_text = s + (<span class="string">'\0'</span> * (<span class="number">16</span> - (len(s) % <span class="number">16</span>)))</span><br><span class="line">        <span class="keyword">return</span> b2a_hex(cipher.encrypt(n_text))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_decrypt</span><span class="params">(s, key, salt, mode=AES.MODE_CBC)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        aes解密</span></span><br><span class="line"><span class="string">        :param s: 待解密字符串</span></span><br><span class="line"><span class="string">        :param key: 密钥</span></span><br><span class="line"><span class="string">        :param salt: 盐, 16bit eg. b'0000000101000000'</span></span><br><span class="line"><span class="string">        :param mode: AES模式</span></span><br><span class="line"><span class="string">        :return: 解密后的字符串</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt)</span><br><span class="line">        <span class="keyword">return</span> cipher.decrypt(a2b_hex(s)).rstrip(<span class="string">'\0'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TailRecurseException</span>:</span></span><br><span class="line">    <span class="string">"""尾递归异常"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, args, kwargs)</span>:</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""常见装饰器： 执行时间timeit，缓存cache，错误重试retry"""</span></span><br><span class="line"></span><br><span class="line">    __cache_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(fn)</span>:</span></span><br><span class="line">        <span class="string">"""计算执行时间"""</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            start = time.time()</span><br><span class="line">            ret = fn(*args, **kwargs)</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"@timeit: &#123;0&#125; tasks, &#123;1&#125; secs"</span>.format(fn.__name__, str(end - start))</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__is_expired</span><span class="params">(entry, duration)</span>:</span></span><br><span class="line">        <span class="string">"""是否过期"""</span></span><br><span class="line">        <span class="keyword">if</span> duration == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> time.time() - entry[<span class="string">'time'</span>] &gt; duration</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__compute_key</span><span class="params">(fn, args, kw)</span>:</span></span><br><span class="line">        <span class="string">"""序列化并求其哈希值"""</span></span><br><span class="line">        key = pickle.dumps((fn.__name__, args, kw))</span><br><span class="line">        <span class="keyword">return</span> hashlib.sha1(key).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache</span><span class="params">(cls, expired_time=<span class="number">-1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        缓存</span></span><br><span class="line"><span class="string">        :param expired_time: 过期时间，-1 表示不过期</span></span><br><span class="line"><span class="string">        :return: 返回缓存的结果或者计算的结果</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_cache</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                key = cls.__compute_key(fn, args, kwargs)</span><br><span class="line">                <span class="keyword">if</span> key <span class="keyword">in</span> cls.__cache_dict:</span><br><span class="line">                    <span class="keyword">if</span> cls.__is_expired(cls.__cache_dict[key], expired_time) <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">                        <span class="keyword">return</span> cls.__cache_dict[key][<span class="string">'value'</span>]</span><br><span class="line">                ret = fn(*args, **kwargs)</span><br><span class="line">                cls.__cache_dict[key] = &#123;</span><br><span class="line">                    <span class="string">'value'</span>: ret,</span><br><span class="line">                    <span class="string">'time'</span>: time.time()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret</span><br><span class="line">            <span class="keyword">return</span> wrap</span><br><span class="line">        <span class="keyword">return</span> _cache</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retry</span><span class="params">(exceptions, retry_times=<span class="number">3</span>, time_pause=<span class="number">3</span>, time_offset=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        错误重试</span></span><br><span class="line"><span class="string">        :param exceptions: 单个异常比如ValueError, 或者tuple,元组元素是异常，比如(ValueError, TypeError)</span></span><br><span class="line"><span class="string">        :param retry_times: 重试次数</span></span><br><span class="line"><span class="string">        :param time_pause: 初始暂停时间</span></span><br><span class="line"><span class="string">        :param time_offset: 暂停时间的偏移倍数，默认不偏移</span></span><br><span class="line"><span class="string">        :return: 返回成功的值，或者重拾次数结束时抛出异常</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_retry</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                retry_times_tmp, time_pause_tmp = retry_times, time_pause</span><br><span class="line">                <span class="keyword">while</span> retry_times_tmp &gt; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">except</span> exceptions:</span><br><span class="line">                        time.sleep(time_pause_tmp)</span><br><span class="line">                        retry_times_tmp -= <span class="number">1</span></span><br><span class="line">                        time_pause_tmp *= time_offset</span><br><span class="line">                <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> wrap</span><br><span class="line">        <span class="keyword">return</span> _retry</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delay</span><span class="params">(delay_time=<span class="number">3</span>, mode=BEFORE)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        延迟装饰器，支持在函数执行之前和之后加延时，如果想在前后同时加，可以使用两次装饰。</span></span><br><span class="line"><span class="string">        time.sleep只会阻塞当前线程不会阻塞整个进程，其它线程不受影响</span></span><br><span class="line"><span class="string">        :param delay_time: 延迟时间，是float类型</span></span><br><span class="line"><span class="string">        :param mode: 模式，指定是在函数执行之前加延时还是在执行之后加，值为BEFORE(1)或者LATER(2)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_delay</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                <span class="keyword">if</span> mode == BEFORE:</span><br><span class="line">                    time.sleep(delay_time)</span><br><span class="line">                ret = fn(*args, **kwargs)</span><br><span class="line">                <span class="keyword">if</span> mode == LATER:</span><br><span class="line">                    time.sleep(delay_time)</span><br><span class="line">                <span class="keyword">return</span> ret</span><br><span class="line">            <span class="keyword">return</span> wrap</span><br><span class="line">        <span class="keyword">return</span> _delay</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tail_call_optimized</span><span class="params">(fn)</span>:</span></span><br><span class="line">        <span class="string">"""尾递归优化装饰器，如果被装饰函数不是尾递归函数则会报错"""</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            f = sys._getframe()</span><br><span class="line">            <span class="keyword">if</span> f.f_back <span class="keyword">and</span> f.f_back.f_back <span class="keyword">and</span> f.f_back.f_back.f_code == f.f_code:</span><br><span class="line">                <span class="keyword">raise</span> TailRecurseException(args, kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">except</span> TailRecurseException <span class="keyword">as</span> e:</span><br><span class="line">                        args = e.args</span><br><span class="line">                        kwargs = e.kwargs</span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IniConfigParserUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""ini配置文件读取"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *file_names)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        init</span></span><br><span class="line"><span class="string">        :param file_names: 包含多个元素的可迭代对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.config = ConfigParser.ConfigParser()</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.config.readfp(open(file_name, <span class="string">'rb'</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.exit(<span class="string">'All files have failed to read'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_string</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.get(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.getint(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_float</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.getfloat(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_boolean</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.getboolean(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_list</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ast.literal_eval(self.config.get(section, option))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dict</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ast.literal_eval(self.config.get(section, option))</span><br></pre></td></tr></table></figure><p>缺失部分后续待添加，记得填坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python常用模块集锦&lt;/p&gt;
&lt;p&gt;常用模块主要分为以下几类（缺失的后续再补充）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间转换&lt;/li&gt;
&lt;li&gt;时间计算&lt;/li&gt;
&lt;li&gt;序列化和反序列化：&lt;code&gt;json&lt;/code&gt;，&lt;code&gt;pickle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编解码：&lt;code&gt;unicode&lt;/code&gt;，&lt;code&gt;base64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加解密：&lt;code&gt;md5&lt;/code&gt;，&lt;code&gt;sha1&lt;/code&gt;，&lt;code&gt;hmac_sha1&lt;/code&gt;，&lt;code&gt;aes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;常见装饰器：&lt;ul&gt;
&lt;li&gt;计算执行时间装饰器&lt;/li&gt;
&lt;li&gt;缓存装饰器&lt;/li&gt;
&lt;li&gt;错误重试装饰器&lt;/li&gt;
&lt;li&gt;延迟装饰器&lt;/li&gt;
&lt;li&gt;尾递归优化装饰器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini&lt;/code&gt;配置文件读取&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noblestaspiration.net/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noblestaspiration.net/tags/Python/"/>
    
      <category term="总结" scheme="http://noblestaspiration.net/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
