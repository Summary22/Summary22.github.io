<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Summary&#39;s Blog</title>
  
  <subtitle>壹百零壹分笑容</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noblestaspiration.net/"/>
  <updated>2018-05-18T08:18:18.775Z</updated>
  <id>http://noblestaspiration.net/</id>
  
  <author>
    <name>Summary</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git上传本地代码</title>
    <link href="http://noblestaspiration.net/2018/05/18/Git%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81/"/>
    <id>http://noblestaspiration.net/2018/05/18/Git上传本地代码/</id>
    <published>2018-05-18T08:16:23.983Z</published>
    <updated>2018-05-18T08:18:18.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><ul><li>首先在GitHub上建一个仓库</li><li>本地新建一个保存代码的文件夹，在保存代码文件夹里面打开git bash</li></ul><a id="more"></a><ul><li><code>然后执行</code></li></ul><blockquote><p><code>git init</code></p></blockquote><ul><li>然后是添加代码，把代码复制到这个文件夹下，执行</li></ul><blockquote><p>git add .//全部添加</p><p>git add xx.cpp//一个个添加</p></blockquote><ul><li>然后执行</li></ul><blockquote><p>git commit -m “保存代码的文件夹”</p></blockquote><ul><li><code>关联仓库：git remote add origin https://git@github.com:Summary22/Myproject.git</code></li><li>上传执行</li></ul><blockquote><p>git push origin master</p></blockquote><p><strong>注意：第一次上传的是其他颜色字体</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;步骤：&quot;&gt;&lt;a href=&quot;#步骤：&quot; class=&quot;headerlink&quot; title=&quot;步骤：&quot;&gt;&lt;/a&gt;步骤：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先在GitHub上建一个仓库&lt;/li&gt;
&lt;li&gt;本地新建一个保存代码的文件夹，在保存代码文件夹里面打开git bash&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="git_operation" scheme="http://noblestaspiration.net/categories/git-operation/"/>
    
    
      <category term="git_Push" scheme="http://noblestaspiration.net/tags/git-Push/"/>
    
  </entry>
  
  <entry>
    <title>pdf2word</title>
    <link href="http://noblestaspiration.net/2018/05/17/pdf2word/"/>
    <id>http://noblestaspiration.net/2018/05/17/pdf2word/</id>
    <published>2018-05-17T06:24:04.660Z</published>
    <updated>2018-05-17T06:58:40.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDF2Word"><a href="#PDF2Word" class="headerlink" title="PDF2Word"></a>PDF2Word</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>程序启动后弹出注册页面，随意输入E-mail和注册码后弹出提示错误的窗口</p><a id="more"></a><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_001.png" alt="Crack013"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>使用IDA破解，软件破解思路是查找字符，看Graph View，最后看核心判断，也可以看到核心算法，写出注册机。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul><li>Shift +F12找出所有的字符串，Ctrl + F搜索错误字符串“Wrong”，（同样的Alt+t可以直接在代码段查找关键词也可以）下图中可以看到</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_002.png" alt="Crack013"></p><ul><li>双击“Your registration key is wrong“进入下图界面 ，图中可以看出字符串所在区域是.data段，并没有在代码段，字符串后面有注释，有写data xref，xref是交叉引用的意思，鼠标移至后面箭头会出现这个call里面具体的代码，鼠标滚轮向下滑动，会显示出更多。双击这里即可进入相应的代码段。</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_003.png" alt="Crack013"></p><p>双击图中黄色的16F后的箭头跳转到字符串的引用位置</p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_004.png" alt="Crack013"></p><p>向上滑动一点可以看到注册成功的相关代码，当然直接搜索字符串也能找到注册成功的相关代码，如果使用的是OllyDbg，通常的做法是在注册失败的代码中打断点，回溯到判断注册是否成功的代码中去，这里使用IDA的Graph View可以加快破解速度，在代码段按空格就会切换到Graph View，</p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_005.png" alt="Crack013"></p><p>可以非常明显的看到判断注册是否成功的流程，有红色断点的框中是判断注册是否成功的函数，先调用call ds:GetDigItemTextA获取输入的注册码，再把注册码通过栈作为参数传到sub_405F60函数中去，这个函数的返回值eax就是最后的注册结果，eax= 0时注册失败，暴力破解可以直接修改eax的值为1，略。下图中，可以看到跳转的连线有红色和绿色，红色是判断失败则执行，绿色是成功执行。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_006.png" alt="Crack013"></p><p>可以看出sub_405F60是关键的call。</p><p>用Graphmode整体地看下sub_405F60函数，左分支返回的都是eax= 0，造成注册失败，输入的注册码只要使程序到达最右下的分支即注册成功</p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_007.png" alt="Crack013"></p><p>逐条分析指令，发现有如下几条条件限制：</p><ul><li><p>判断输入的注册码长度是否为0x14，即20(d)位</p></li><li><p>atoi(code[0]) + atoi(code[1]) = 0xB  (注意这里没有使用ASCII码做运算)</p><p>(int)注册码的第一位+ (int)注册码的第二位= 0xB</p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_008.png" alt="Crack013"></p><ul><li><p>atoi(code[18]) + atoi(code[19]) = 0xD</p><p>(int)注册码第19位 + (int) 注册码第20位 = 0xD</p></li><li><p>atoi(code[5])+atoi(code[13]) = 0x9</p></li><li><p>code[12] = 0x56(ASCII  ‘V’)</p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_009.png" alt="Crack013"></p><ul><li>code[14] = 0x33 (ASCII ‘3’)</li><li>code[15] = 0x33 (ASCII ‘2’)</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_010.png" alt="Crack013"></p><p>综上</p><p>注册码code的要求为</p><ul><li>总长度20位</li><li>atoi(code[0]) + atoi(code[1]) =0xB  （11D）</li></ul><ul><li>atoi(code[18]) + atoi(code[19])= 0xD （13D）</li><li>atoi(code[5]) + atoi(code[13])= 0x9  （9D）</li></ul><ul><li>code[12] = ‘V’</li><li>code[14] = ‘3’</li></ul><ul><li>code[15] = ‘2’</li><li>其他位随便填写</li></ul><p>注册机以及满足以上要求的一个注册码是如下图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_011.png" alt="Crack013"></p><p>破解以后的画面是下图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_012.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/p2w_013.png" alt="Crack013"></p><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>IDA的Graph View功能十分强大，F5更是可以近似生成源码，而且动态调试的时候在程序段同样可以查看到Graph View，而且当从一个模块到另一个模块的时候，如果停在上一个模块的最后一条指令，那么接下来要执行哪一个模块，指向那一个模块的线会跳动。但是感觉IDA动态调试没有OD方便，可能是IDA用得比较少吧。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PDF2Word&quot;&gt;&lt;a href=&quot;#PDF2Word&quot; class=&quot;headerlink&quot; title=&quot;PDF2Word&quot;&gt;&lt;/a&gt;PDF2Word&lt;/h1&gt;&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h2&gt;&lt;p&gt;程序启动后弹出注册页面，随意输入E-mail和注册码后弹出提示错误的窗口&lt;/p&gt;
    
    </summary>
    
      <category term="逆向分析" scheme="http://noblestaspiration.net/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="IDA" scheme="http://noblestaspiration.net/tags/IDA/"/>
    
      <category term="pdf2word" scheme="http://noblestaspiration.net/tags/pdf2word/"/>
    
  </entry>
  
  <entry>
    <title>010Editor</title>
    <link href="http://noblestaspiration.net/2018/05/03/010Editor/"/>
    <id>http://noblestaspiration.net/2018/05/03/010Editor/</id>
    <published>2018-05-03T03:15:01.723Z</published>
    <updated>2018-05-03T05:55:48.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="010Editor破解"><a href="#010Editor破解" class="headerlink" title="010Editor破解"></a>010Editor破解</h1><h2 id="关于软件"><a href="#关于软件" class="headerlink" title="关于软件"></a>关于软件</h2><ul><li>官网的介绍：Professional Text Editor+World’s Best Hex Editor</li></ul><a id="more"></a><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_001.png" alt="Crack013">)</p><h2 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h2><p>抓包分析软件在验证的时候没有发包，所以可以确定注册码一定是在本地生成，找到判断成功与否的指令，改掉jnz或者在上层调用中改返回值。此次没有编写注册机。</p><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><ul><li>先使用PEID查壳，发现无壳</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_002.png" alt="Crack013"></p><ul><li>用OD打开程序，F9运行起来，tools-&gt;register，会弹出一个form，然后随便输入用户名，验证码，点击确定，弹出失败的messagebox，此时F12暂停，堆栈查看</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_003.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_004.png" alt="Crack013"></p><ul><li>属于程序领空的一一查看，0012A380处，shawcall，会发现很多字符串，判断的地方应该就在这里，然后在这个函数的入口处下断</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_005.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_006.png" alt="Crack013"></p><ul><li>再次点击check license，会断在刚刚断点地方，F8单步下去，会发现有一处cam后跳过了正确的字符，修改这里，破解成功。</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_007.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_008.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_009.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/010Editor_010.png" alt="Crack013"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;010Editor破解&quot;&gt;&lt;a href=&quot;#010Editor破解&quot; class=&quot;headerlink&quot; title=&quot;010Editor破解&quot;&gt;&lt;/a&gt;010Editor破解&lt;/h1&gt;&lt;h2 id=&quot;关于软件&quot;&gt;&lt;a href=&quot;#关于软件&quot; class=&quot;headerlink&quot; title=&quot;关于软件&quot;&gt;&lt;/a&gt;关于软件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;官网的介绍：Professional Text Editor+World’s Best Hex Editor&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="逆向分析" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>WinRAR去广告</title>
    <link href="http://noblestaspiration.net/2018/04/23/WinRAR%E5%8E%BB%E5%B9%BF%E5%91%8A/"/>
    <id>http://noblestaspiration.net/2018/04/23/WinRAR去广告/</id>
    <published>2018-04-23T06:51:49.826Z</published>
    <updated>2018-05-03T05:55:48.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WinRAR去广告"><a href="#WinRAR去广告" class="headerlink" title="WinRAR去广告"></a>WinRAR去广告</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>WinRAR是一款强大的压缩文件管理工具，目前最新版本为5.50版本，但是中文免费版本在每次启动时，会弹出广告页面，本次破解目标是去除广告页面。如下图：</p><a id="more"></a><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_002.png" alt="Crack013"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>官网下载软件，先使用PEID检查是否有壳，有壳的话去壳，然后通过OD进行跟踪分析，找到页面弹出的指令将其nop或者直接jmp，达到去取广告的目的。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul><li>先使用PEID查壳，无壳，但无法查出是什么语言编写的程序。</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_001.png" alt="Crack013"></p><ul><li><p>F9运行后F12暂停，Alt+K查看堆栈，找最近在程序领空的调用，右键show call，查找ASC和Unicode没有发现关键字，这样只能F8单步下去，查看运行哪个call程序会运行并弹出广告，然后打断，F7单步进这个call，这样反复查看，最后找到弹出页面的call，nop或jmp这个call。如下图所示：</p><p>程序入口点：</p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_003.png" alt="Crack013"></p><p>F8跳过这个call时会运行程序并且弹出广告，在这下断，Ctrl+F2重新运行，F9到这一步，F7进入</p><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_004.png" alt="Crack013"></p><p>进入上面的call，F8下去，如下图注释，第一个call，弹出form，第二个call，加载form里面的内容，这里不会弹出广告</p><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_005.png" alt="Crack013"></p><p>运行第一个和第二个call以后的结果：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_006.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_008.png" alt="Crack013"></p><p>继续F8调试，当运行完下图这个call之后，弹出了广告</p><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_009.png" alt="Crack013"></p><p>查看上图指令，经过一番研究，上面一条指令je short WinRAR.0132CF78，跳过紧挨着je的call指向弹出广告的call，这里修改je指令，将其修改为直接跳过弹出广告的call，如下图所示：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/WinRAR_010.png" alt="Crack013"></p><p>然后F9运行，发现不会弹出广告，将其保存替换exe即可</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WinRAR去广告&quot;&gt;&lt;a href=&quot;#WinRAR去广告&quot; class=&quot;headerlink&quot; title=&quot;WinRAR去广告&quot;&gt;&lt;/a&gt;WinRAR去广告&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;WinRAR是一款强大的压缩文件管理工具，目前最新版本为5.50版本，但是中文免费版本在每次启动时，会弹出广告页面，本次破解目标是去除广告页面。如下图：&lt;/p&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="WinRAR" scheme="http://noblestaspiration.net/tags/WinRAR/"/>
    
  </entry>
  
  <entry>
    <title>U盘杀毒专家</title>
    <link href="http://noblestaspiration.net/2018/04/20/U%E7%9B%98%E6%9D%80%E6%AF%92%E4%B8%93%E5%AE%B6/"/>
    <id>http://noblestaspiration.net/2018/04/20/U盘杀毒专家/</id>
    <published>2018-04-20T06:52:39.551Z</published>
    <updated>2018-05-03T05:55:48.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="U盘杀毒专家破解追码"><a href="#U盘杀毒专家破解追码" class="headerlink" title="U盘杀毒专家破解追码"></a>U盘杀毒专家破解追码</h1><h2 id="关于软件"><a href="#关于软件" class="headerlink" title="关于软件"></a>关于软件</h2><ul><li>U盘杀毒专家是一款国产的专业U盘病毒专杀工具，它可以检测查杀文件夹变成exe病毒，auturun病毒，vbs病毒，U盘文件夹被隐藏等1200多种U盘病毒，还可以免疫U盘，自动修复因为病毒而损坏的系统配置以及文件。另外还提供一些其他U盘辅助功能，比如U盘解锁功能，以及进程管理等。如下图，需要用一些功能的时候需要购买，目标就是破解此处并写出注册机。</li></ul><a id="more"></a><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_001.png" alt="Crack013"></p><h2 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a>破解思路</h2><p>官网下载软件，先使用PEID检查是否有壳，有壳的话去壳，然后通过OD、DeDe等进行跟踪分析，找到算法，最后编写出注册机。</p><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><ul><li>先使用PEID查壳，发现是UPX壳，使用UPXEasyGUI 2.0去壳，Scanner-&gt;Browse选择exe文件所在文件夹-&gt;Option&gt;Decompress-&gt;Start,如下图，完了再检测，就会发现程序已去壳。</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_002.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_003.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_004.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_005.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_006.png" alt="Crack013"></p><ul><li>发现是Dephi编写的程序，于是用DeDe来寻找确定按钮事件，进而寻找方法破解。打开DeDe，点击forms根据名称以及坐标寻找按钮，根据事件的名字，BuyNow事件就是立即购买按钮，双击，根据名称以及坐标，发现button14为点击立即购买以后那个确定按钮，如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_007.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_008.png" alt="Crack013"></p><ul><li>根据上图找到的确定按钮入口地址，在此下断，F9程序运行，点击立即购买，然后随意输入一串字符，点击确定，会断在确定按钮的入口地址，开始F7，F8，交替调试寻找：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_009.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_010.png" alt="Crack013"></p><p>​    上图主模块区，最下面的指令test al，al，当F8到这里，发现执行完这一句，下一条指令跳过了很多call，很有可能是关键判断，试一下，nop掉下一句JNZ，F9运行，发现破解成功，但是并没有真正的注册，如下图，所以可以判断，这之前的call很可能是关键call，点击确定，将nop的修改回来，进入上面提及的call</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_011.png" alt="Crack013"></p><p>​    进入之后F8运行，当运行到下图所示时，会发现一串字符串，这串字符可以用于升级换注册码，这并不是正确的注册码，继续往下寻找</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_012.png" alt="Crack013"></p><p>​    再继续往下寻找，又发现类似上图一样的一串字符，如下图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_013.png" alt="Crack013"></p><p>​    经过验证，这里的字符串就是正确注册码，但是一旦输入这个注册码，然后点击确定，就会写进注册表，点击立即购买就会一直出现您已购买，这给之后的分析造成麻烦，所以这里不输入，进入这个关键call寻找算法写出注册机，如下图，这个call里面有两个call，其他指令是赋值和对栈的操作，进入第一个call，一步一步运行会发现是生成机器码的过程，然后单步进入第二个call，</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_014.png" alt="Crack013"></p><p>​    如下图，算法就是在下面图上所示，通过分析，可以判断，正确的注册码是通过取出每个字符经过一定操作进行计算的，而真正的算法是：假设计算到第n个字符，用（2*n+1）+第n个字符的asc码+1，结果就是正确注册码的asc码，通过上面算法算出的asc码如果不是字母或者数字则跳过，详细注释见下图</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_015.png" alt="Crack013"></p><p>​    这个for循环之后在local3里面存的就是正确注册码，所以可以肯定，这两个call肯定会成功生成正确的码，单步进入第一个call，发现里面很简单，但是进入这个call的第一句，push edx，很关键的一句话。这时候会压入上面算法计算的值，将这个数据保护起来。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_016.png" alt="Crack013"></p><p>​    单步进入，这时候，有三个call在这里，经过分析，第一个call并没有生成正确字符，第二个call里面，有着重要的信息，而此时，0012F818这个地址的值没有改变，一直关注这里的值，单步进入第二个call，指令的分析见下图。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_017.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_018.png" alt="Crack013"></p><ul><li><p>编写注册机</p><ul><li>上面细致分析了算法，接下来就是根据算法编写注册机，下图为注册机界面：</li><li>可以比对，生成的注册码和上面图中提及的正确注册码一致，将注册码输入，即可注册成功。再次点击立刻购买，会提示你已经注册成功，如下图：</li></ul></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_019.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_020.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_021.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Upanshadu_022.png" alt="Crack013"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;U盘杀毒专家破解追码&quot;&gt;&lt;a href=&quot;#U盘杀毒专家破解追码&quot; class=&quot;headerlink&quot; title=&quot;U盘杀毒专家破解追码&quot;&gt;&lt;/a&gt;U盘杀毒专家破解追码&lt;/h1&gt;&lt;h2 id=&quot;关于软件&quot;&gt;&lt;a href=&quot;#关于软件&quot; class=&quot;headerlink&quot; title=&quot;关于软件&quot;&gt;&lt;/a&gt;关于软件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;U盘杀毒专家是一款国产的专业U盘病毒专杀工具，它可以检测查杀文件夹变成exe病毒，auturun病毒，vbs病毒，U盘文件夹被隐藏等1200多种U盘病毒，还可以免疫U盘，自动修复因为病毒而损坏的系统配置以及文件。另外还提供一些其他U盘辅助功能，比如U盘解锁功能，以及进程管理等。如下图，需要用一些功能的时候需要购买，目标就是破解此处并写出注册机。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="注册机" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/%E6%B3%A8%E5%86%8C%E6%9C%BA/"/>
    
      <category term="逆向分析" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/%E6%B3%A8%E5%86%8C%E6%9C%BA/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="DelphiDecompiler" scheme="http://noblestaspiration.net/tags/DelphiDecompiler/"/>
    
      <category term="Delphi" scheme="http://noblestaspiration.net/tags/Delphi/"/>
    
  </entry>
  
  <entry>
    <title>Crack007</title>
    <link href="http://noblestaspiration.net/2018/04/13/Crack007/"/>
    <id>http://noblestaspiration.net/2018/04/13/Crack007/</id>
    <published>2018-04-13T13:25:04.305Z</published>
    <updated>2018-05-03T05:55:48.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crack007-aLoNg3x-2"><a href="#Crack007-aLoNg3x-2" class="headerlink" title="Crack007-aLoNg3x.2"></a>Crack007-aLoNg3x.2</h1><h2 id="关于题目"><a href="#关于题目" class="headerlink" title="关于题目"></a>关于题目</h2><ul><li>此题和上题很相似，但是具体内部实现是不一样的，而且本题的目标是写出注册机。同样的这个程序是用Delphi写的，无壳，程序隐藏两个按钮才达到破解，首先输入用户名和序列号，点击register，如果正确，register按钮隐藏，会出现一个again按钮，两个按钮全部隐藏既破解成功，另外有个about按钮，点击会弹出四个form，只是一些说明和提醒，还有一个cancella按钮，用于将序列号清零，当你输入的序列号不为纯数字的时候会跳出提醒，当输入序列号为0时也会弹出提示框。下面为程序初始状态：</li></ul><a id="more"></a><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_001.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_002.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_003.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_004.png" alt="Crack013"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>借助DelphiDecompiler找到各个事件入口地址，用OllyDBG动态调试程序，在事件入口打断点，然后单步分析指令，分析逻辑关系，找出主要算法，写出注册机。</p><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><ul><li>用DelphiDecompiler打开exe文件查看各个按钮事件的入口地址并在下地址下断，事件后就为入口地址：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_005.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_006.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_007.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_008.png" alt="Crack013"></p><ul><li>单步调试，查看算法，先查看register事件，输入用户名：qwer12，序列号：123456：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_009.png" alt="Crack013"></p><p>由于之前在register事件入口下断，所以程序会停在register事件入口，这时单步F8向下调试，</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_010.png" alt="Crack013"></p><p>到这里可以看到，这个je跳过了提示框以及下面三个call，说明输入符合要求。继续F8运行，</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_insert_10and11.png" alt="Crack013"></p><p>到上面一步，这个跳转跳过了隐藏register按钮和显示again的关键call，按下esc往上一步看，test里面al的值决定这个跳转，再往上看，test上一条指令，call aLoNg3x_.00442FF2，很有可能这个call里面就有关键的算法，单步F7进去查看算法，</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_011.png" alt="Crack013"></p><p>F8单步到这一步的时候，可以看到一个关键的跳转，JNZ跳过了一句赋值语句，让bl为1的赋值语句，然后继续F8，当跳出函数，回到上图test语句的时候，这时al为0</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_013.png" alt="Crack013"></p><p>将上一步的JNZ指令nop掉，让bl直接为1，可以看到，al的值也为1，并且register按钮隐藏，again按钮显示出来，再点击一下again按钮就破解成功了，如下图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_012.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_013.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_014.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_015.png" alt="Crack013"></p><p>通过上面分析可以判断，上面图中，JNZ上一步的cmp为关键判断，这条指令比较的是寄存器EBX和ECX里面的值，再往上分析，去寻找EBX和ECX的算法。重新运行一下程序，然后单步进入关键call，从建立栈帧开始单步往下分析，下图所示，通过call取出用户名长度存在EAX中，然后通过cmp判断输入用户名是否合法，这里的限制条件是用户名必须大于4位。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_insert_15and16.png" alt="Crack013"></p><p>继续往下调试，可以看到有两个循环</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_016.png" alt="Crack013"></p><p>这里执行的算法是：</p><p>内层循环中，开始取输入的用户名的第一个字符和最后一个字符相乘，然后再与edi相乘，结果存在edx，最后将ebx与edx相加后结果存在ebx，比如上面例子中，输入用户名为qwer12，那么第一次就是字符q的asc码与字符2的asc码相乘，然后与edi里面的值相乘，最后加上ebx里面的值结果存在ebx。</p><p>因为esi第一次赋值为1，在内存循环中不变，所以在一次外层循环中，edx始终保持不变，对于外层循环来说，外层循环一次，等于输入用户名的一个字符依次乘用户名的所有字符，并乘edi，求和之后保存在ebx。</p><p>这里执行的时候上面有指令将ebx置0，那么变量只剩下edi了，程序调试中，edi始终为0，这就导致最后结果一直为零，关键判断不相等，跳过将bl置1的指令。所以需要寻找到edi的赋值指令，往上会看到</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_017.png" alt="Crack013"></p><p>这条指令将eax的值给了edi，而前面的语句没有提及eax，所以要回到call外面去找，重新点击register，程序断下之后寻找eax赋值指令</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_018.png" alt="Crack013"></p><p>在关键call上一条，将地址0x445830的值赋给eax了，但是这时这地址里的值为零，这时要寻找给这个地址赋值的指令，往上可以看到一条，mov    dword ptr [0x445830],<br>eax，但是这条指令被上面判断序列号是否合法的跳转语句跳过了，再往上找不到操作这个地址的指令了，可以判断，在mov    dword ptr [0x445830], eax指令上一条call指令，很有可能包含eax的算法，分析这个call，可以找出eax的值。输入一个不合要求的序列号，带字母即可，单步进入这个call，进行分析。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_019.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_020.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_021.png" alt="Crack013"></p><p>上图输入不是数字的序列号，顺利进入到赋值语句之前的关键call里面，图中有一条指令cmp eax，0x5，这条指令要求输入序列号必须大于五位，所以这里的cmp置Z标志位为1，跳转指令跳过了关键算法，重新输入序列号，重新进入，分析主要算法。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_022.png" alt="Crack013"></p><p>这里算法只有一个for循环，刚开始将序列号长度取出存在eax，并将其赋给ebx，作为控制条件，然后取出序列号的第二个字符除以0x11的余数存在edx，然后再加一，取出序列号第一个字符与edx相乘，这算一次循环，下次操作第三个字符和第二个字符，循环五次，最后的结果加上0x37B。接着分析下面算法：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_023.png" alt="Crack013"></p><p>计算的结果存在eax中，然后结果除以0x7148，结果存在eax，余数存在edx，然后将结果转存在ebx，最后又将ebx的值返还给eax，计算的结果暂称为因子，因子的计算解决了对图十二分析时所遇到的问题，但这里要输入不合法字符串才能计算。接下来继续分析图十分析之后的算法：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_024.png" alt="Crack013"></p><p>首先将计算的结果存在eax，，然后对0xA2C2A进行取余，结果存在ebx，然后用输入的序列号除0x59，商保存在ecx，输入的序列号再对0x50取余，结果加上之前的ecx，最终结果再加一，然后和ebx值相比较，如果相等，则jnz不会跳转，bl的值会等于1，这时候，再回到这个call之外，将不会再将隐藏register按钮和显示again按钮的指令跳过，会执行，也就破解成功一半，again按钮的计算方法和register按钮就算方法一样，所以只要执行一遍对register按钮的操作，again按钮也将隐藏。</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_025.png" alt="Crack013"></p><ul><li>编写注册机</li></ul><p>上面细致分析了算法，接下来就是根据算法编写注册机，下图为注册机界面：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_026.png" alt="Crack013"></p><p>在计算注册码的时候会生成多个，所以可以随机选择。</p><p><strong>特别说明：（1）.在计算的时候，如果用户名字符串输入过长，或者长度小于6，都是属于不合法的用户名。输入过长的话，计算的时候，因为寄存器为32位，所以结果很可能溢出造成错误。经过测试，如果输入用户名为6个纯字母，结果溢出，所以用户名最好以数字和字母配合，而长度大于6位，很大几率造成溢出，如果选取asc码值比较小的符号当中用户名的话，情况会好一些。（这些可能是程序本身造成的限制）</strong></p><p><strong>（2）.验证注册码是否正确的步骤应该是，随机填写用户名和注册码（这个注册码一定为不合法的注册码，也就是不要全为数字，这样edi的值才不为0），点击register键，出现提示框点掉，然后用注册机生成注册码，将生成的注册码重新填入程序，点击register，这时候register会消失，然后重新做一遍上述操作，again也会被隐藏，破解成功。</strong></p><p>下图为随机验证：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_027.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_028.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_029.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_030.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_031.png" alt="Crack013"><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_032.png" alt="Crack013"></p><p>破解之后会出现Cracked by casa63.</p><p>另外补上注册不成功的截图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/aLoNg3x_033.png" alt="Crack013"></p><h2 id="补充-OllyDBG破壳"><a href="#补充-OllyDBG破壳" class="headerlink" title="补充-OllyDBG破壳"></a>补充-OllyDBG破壳</h2><p>用OD加载进去之后，先F8单步运行一下，然后看见右边ESP字体是红色的，右键ESP在数据窗口跟随，这时候右键左下方的地址后面的十六进制码，选择long，然后address，然后选择esp那里作为断点（硬件访问-&gt;word），（然后这种方法不可行）</p><p>另一种方法：使用UPXEasyGUI去壳，scan文件夹，option一下是加壳还是脱壳，然后点击开始，再用pied查壳发现没壳了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crack007-aLoNg3x-2&quot;&gt;&lt;a href=&quot;#Crack007-aLoNg3x-2&quot; class=&quot;headerlink&quot; title=&quot;Crack007-aLoNg3x.2&quot;&gt;&lt;/a&gt;Crack007-aLoNg3x.2&lt;/h1&gt;&lt;h2 id=&quot;关于题目&quot;&gt;&lt;a href=&quot;#关于题目&quot; class=&quot;headerlink&quot; title=&quot;关于题目&quot;&gt;&lt;/a&gt;关于题目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;此题和上题很相似，但是具体内部实现是不一样的，而且本题的目标是写出注册机。同样的这个程序是用Delphi写的，无壳，程序隐藏两个按钮才达到破解，首先输入用户名和序列号，点击register，如果正确，register按钮隐藏，会出现一个again按钮，两个按钮全部隐藏既破解成功，另外有个about按钮，点击会弹出四个form，只是一些说明和提醒，还有一个cancella按钮，用于将序列号清零，当你输入的序列号不为纯数字的时候会跳出提醒，当输入序列号为0时也会弹出提示框。下面为程序初始状态：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="注册机" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/%E6%B3%A8%E5%86%8C%E6%9C%BA/"/>
    
      <category term="逆向分析" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/%E6%B3%A8%E5%86%8C%E6%9C%BA/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="DelphiDecompiler" scheme="http://noblestaspiration.net/tags/DelphiDecompiler/"/>
    
      <category term="Delphi" scheme="http://noblestaspiration.net/tags/Delphi/"/>
    
  </entry>
  
  <entry>
    <title>Crack013</title>
    <link href="http://noblestaspiration.net/2018/04/04/Crack013/"/>
    <id>http://noblestaspiration.net/2018/04/04/Crack013/</id>
    <published>2018-04-04T11:26:30.176Z</published>
    <updated>2018-05-03T05:55:48.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crack013-badboy"><a href="#Crack013-badboy" class="headerlink" title="Crack013-badboy"></a>Crack013-badboy</h1><h2 id="关于题目"><a href="#关于题目" class="headerlink" title="关于题目"></a>关于题目</h2><ul><li>通过PEID分析，此题是P-Code编码的VB程序，下图是未破解前程序所有状态。两种模式，一种是序列号，一种是名称加序列号（输入字符5个以上），输入不正确会出现Try Again字样。</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_1.png" alt="Crack013"></p><a id="more"></a><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>如果此题采用OllyDBG动态分析，很难找到合适断点去修改指令破解。既然程序采用VB就可以使用VB.Decompiler进行静态分析并修改，达到破解的目的。</p><h2 id="题解过程"><a href="#题解过程" class="headerlink" title="题解过程"></a>题解过程</h2><ul><li>首先使用PEID查壳，检测到是VB程序，如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_2.png" alt="Crack013"></p><ul><li><p>用VB.Decompiler加载exe文件，如下图<br>  <img src="http://p6flo4av7.bkt.clouddn.com/Crack013_3.png" alt="Crack013"></p></li><li><p>点击下方Combol1_Click事件进行分析，如下图<br>  <img src="http://p6flo4av7.bkt.clouddn.com/Crack013_4.png" alt="Crack013"></p></li><li><p>分别点击Command2和Command4进行进一步分析<br>  <img src="http://p6flo4av7.bkt.clouddn.com/Crack013_5.png" alt="Crack013"></p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_6.png" alt="Crack013"></p><ul><li>根据分析，通过Disassemble找到判断语句对应的反汇编指令，在HEX Editor中搜索并进行更改，破解模式1：搜索4051DA并将1C改为1D或者将4051CA处FB 30改为FB 3D。破解模式二：搜索405815将1C改为1D或者将40580D处FB 30改为FB 3D，（部分指令含义见文章末尾附录），如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_7.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_8.png" alt="Crack013"></p><ul><li>破解成功截图</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_9.png" alt="Crack013"></p><ul><li><p>另外的方法：用OllyDBG来分析的话，可以找到正确密码，但是很难将其破解。简单介绍这种思路：</p><p>用OllyDBG将exe运行，选择断点：BreakPoint-&gt;VB APIs-&gt;Comaparision-&gt;_vbaStrcomp，然后F9运行程序，输入序列号：123456，点击try，F9运行程序会中断，看主模块的堆栈区，会显示出来正确的答案：7718158。</p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_10.png" alt="Crack013"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_11.png" alt="Crack013"></p><ul><li>同理，名称加序列号模式也会出现正确序列号：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_12.png" alt="Crack013"></p><ul><li>这时候名称不变再输入一次序列号57572-444610就会成功。</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/Crack013_13.png" alt="Crack013"></p><ul><li>程序有一点特殊的地方：输入正确的序列号点try，显示”Congratulation !”和“OK”按钮，点OK按钮后，回到序列号页，又输入刚刚正确的的序列号，再次点try会显示”Try Again!”，这是因为在第一次注册成功的时候，根据上面分析Label3.caption被赋值：“Congratulation !”，只有再次输入Congratulation !才能再次成功，不再会跳出Try Again!</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li>跳转指令：</li></ul><p>Branch-无条件跳转-1E</p><p>BranchT-栈顶数据为真则跳转-1D</p><p>BranchF-栈顶数据为假则跳转-1C</p><ul><li>比较指令：</li></ul><p>EqVarBool-比较变量相等：FB 33</p><p>NeVarBool-比较变量不相等：FB 40</p><p>EqStr-比较字符串相等：FB 30</p><p>NeStr-比较字符串不相等：FB 3D</p><p>Lt-判断是否小于</p><p>Gt-判断是否大于</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>这里补充一下栈帧的概念，栈帧是用来实现过程/函数调用一种数据结构（就是栈），也就是记录每次函数调用的相关信息的记录单元。这个<a href="https://blog.csdn.net/yxysdcl/article/details/5569351" target="_blank" rel="noopener">参考网址</a>里面的内容很经典</li><li>关键跳转前面一般都是关键call，所以要写注册机的话，往这里分析</li><li>idiv是有符号除法，影响的标志位有A,C,O,P,S,Z，32位中，隐含的除数有EDX和EAX，商存在EAX，余数存在EDX</li><li>CDQ：这个指令把 EAX 的第 31 bit 复制到 EDX 的每一个 bit 上。 它大多出现在除法运算之前。它实际的作用只是把EDX的所有位都设成EAX最高位的值。也就是说，当EAX &lt;80000000, EDX 为00000000；当EAX &gt;= 80000000， EDX 则为FFFFFFFF。</li><li>标志位补充：<ul><li>O:Overflow，溢出标志</li><li>S:Sign，符号标志，结果为负置1</li><li>Z</li><li>C:Carry Flag，进位</li><li>A：Auxiliary carry Flag，辅助进位标志，记录运算时第3位（半个字节）产生的进位，有进位为1</li><li>P：Parity，奇偶标志</li><li>D：Direction，方向标志</li><li>I：Interrupt，中断标志</li><li>T：Trap，陷阱标志</li></ul></li><li>一些汇编指令</li></ul><ul><li>shl，逻辑左移位，最后移出的一位写入cf中，最低位用0补充</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crack013-badboy&quot;&gt;&lt;a href=&quot;#Crack013-badboy&quot; class=&quot;headerlink&quot; title=&quot;Crack013-badboy&quot;&gt;&lt;/a&gt;Crack013-badboy&lt;/h1&gt;&lt;h2 id=&quot;关于题目&quot;&gt;&lt;a href=&quot;#关于题目&quot; class=&quot;headerlink&quot; title=&quot;关于题目&quot;&gt;&lt;/a&gt;关于题目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过PEID分析，此题是P-Code编码的VB程序，下图是未破解前程序所有状态。两种模式，一种是序列号，一种是名称加序列号（输入字符5个以上），输入不正确会出现Try Again字样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://p6flo4av7.bkt.clouddn.com/Crack013_1.png&quot; alt=&quot;Crack013&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="Crack" scheme="http://noblestaspiration.net/tags/Crack/"/>
    
      <category term="Badboy" scheme="http://noblestaspiration.net/tags/Badboy/"/>
    
  </entry>
  
  <entry>
    <title>Crack001</title>
    <link href="http://noblestaspiration.net/2018/04/02/Crack001/"/>
    <id>http://noblestaspiration.net/2018/04/02/Crack001/</id>
    <published>2018-04-02T13:41:07.465Z</published>
    <updated>2018-05-03T05:55:48.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crack001-Acid-burn"><a href="#Crack001-Acid-burn" class="headerlink" title="Crack001-Acid_burn"></a>Crack001-Acid_burn</h1><h2 id="关于题目"><a href="#关于题目" class="headerlink" title="关于题目"></a>关于题目</h2><ul><li>所用工具为OllyDBG，开始想用IDA，但是发现并不适合动态调试（也许将来打脸）。</li><li>题目中需要破解的是两个序列号，一个是一串字符，一个是两串，一串字符的往往是硬编码在程序内部，而两串的可以通过一定计算设计得复杂一点，通过研读指令才能破解。注册机需要完全理解汇编指令才能编写，注册机晚些在补。（截图之后再补2018.4.2）</li></ul><a id="more"></a><h2 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h2><ul><li>先用ODBG把程序运行起来，通过F8找到第一个弹框所调用的指令，然后F7单步进去，Ctrl+F8进一步定位弹框的位置，这一题，刚开始的弹框可有可无，可以迅速点击确定，然后继续点击Ctrl+F8继续运行，直到弹出下一个Form，这时候选择一个串那个，点进去，随便输一串，然后点击check，这时候，之前标记的断点起到作用了，当你看到call  jmp User32.messagebox的时候，看主模块的堆栈区，找到离他最近的一个返回，右键进入反汇编，然后你会看到略微熟悉的UnIcode编码提醒，最后找到push ebp   mov  ebp  esp，这两条指令，这两条指令是建立栈帧，然后往下寻找，找到JNZ，右键二进制，nop填充，这就破解完了，同理，两串的也是这样破解，但是这样破解唯一一点不好的地方就是不管你输什么进去都能进入，最好的方法是写注册机，这样会强大很多，这个后续一定会补上，截图后面也会补上。</li><li>这里还有第二种方法，比上面方法简单一些，我选用上面方法是因为根据<a href="https://www.52pojie.cn/thread-264393-1-1.html" target="_blank" rel="noopener">参考网址</a> ，我的显示不了低地址的messagebox，无法去查找返回地址，然后我重新在虚拟机装了win7，这时候可以看见了，直接运行到弹出出错的form，然后去查找低地址的messagebox，右键查看调用，在这个call打断，然后继续点击check，这时候会停在断点，然后在主模块区的堆栈区找到第一条返回语句，然后右键查看反汇编，进去找一条JNZ的汇编语句，这时候看左边的实线，会看见跳转到sorry..的Unicode，Unicode语句在右边查看，将这句nop填充即可。</li></ul><h2 id="一点知识"><a href="#一点知识" class="headerlink" title="一点知识"></a>一点知识</h2><h3 id="题目相关"><a href="#题目相关" class="headerlink" title="题目相关"></a>题目相关</h3><ul><li>发现问题：当点击左边两串，先输入一些字符，破解会失败，比如第一行输入123，第二行输入qwe，注册不会成功，这是因为程序本身在设计的时候就不允许输入字符少于三位。</li></ul><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><ul><li>JE，JNE，JNZ和JZ的区别，JE（jump equal）相等则跳转，JNE（jump not equal）不相等则跳转，JNZ结果不为零则跳转，JZ零标志为1就跳转。</li><li>[test和cmp的区别][<a href="https://blog.csdn.net/thanklife/article/details/11067731]" target="_blank" rel="noopener">https://blog.csdn.net/thanklife/article/details/11067731]</a> </li><li>给出<a href="http://www.cnblogs.com/bbdxf/p/3793545.html" target="_blank" rel="noopener">VB反汇编参考</a> </li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>选择破解完01的时候，第二个选择破解09，当面对的是跳出成功和失败的页面的时候，往往可以通过先OD打开程序，先运行到密码输入错误界面，然后alt+k查看堆栈，找到massagebox查看调用，然后寻找跳转成功和失败的指令，nop掉失败的指令就爆破成功，随后的13题会单独写一篇</strong></li><li><strong>再来说08,08破解的方法和09很相似，有两种方法可选，第一是和09一样，运行程序直至出错，回到OD，按F12，然后去alt+K去堆栈看messageBox，查看调用（show call），然后在主模块的堆栈区，这时候一定要看提示的Unicode语句在主模块堆栈地址是否在程序领空，如果在领空的话，离他最近return右键看反汇编，上下翻动看到成功和失败的Unicode，然后查找跳转到失败的je，jNz等语句，让NOP掉这条指令就爆了，第二种方法，由于程序是VB，所以可以利用其API，BreakPoint -&gt;VB APIs-&gt;Comaparison-&gt;选上一切可疑的比如_vbaStrCmp,_vbaStrComp,_vbaVarCmpEq，然后点击确定的时候会中断，上下翻看程序是否有成功或者失败的提示，然后找到跳转NOP，这时候也可以看断点处是否在程序领空，如果在的话很可能就是那里。这种方法要看编译器</strong></li><li><strong>用VB.D…反编译出来的地址和OD里面一模一样，利用这个特性，其实可以把11题破了，但是要写出注册机很难，11题根据VB反编译器分析之后，可以Ctrl+G直接去含有判断的地方把跳过显示REGISTRIERT的跳转指令nop掉就可以，而且查找字符，无论是Unicode还是ASCII，都需要在程序的领空才能查到程序相关的字符，在超过程序领空的查不到 </strong></li><li><strong>在这之后由看了04,04爆破可以在加载程序完之后选择查看asc码，看到恭喜注册成功双击进去，然后这里有一点小坑，上面的jnz指令，如果不点击程序图片的框的话，是不会运行到这里的，可以在这里下断试，把跳过成功这句jnz nop掉就可以，有时候会出现一直搜索不到的情况，那就先运行程序，F12暂停，alt+k查看堆栈，找到程序领空，show produce然后再查找就可以了</strong></li><li><strong>一般程序会从低地址开始加载，如果一开始运行程序的时候从F…开始的，那就是估计程序有那么一点毛病，我之前是在用OD加载之前运行了一下看，然后就从F..开始加载了，所以…讲不清 </strong></li><li><strong>第五个，暴力破解，大概步骤是这样的，首先运行程序然后F9让其运行，然后F12中断，这时候alt+K，看到这里这个调用是在程序领空的，右键跟进去，进到主模块，右键查看ASC码，寻找“注册了”的字样，双击进去，把跳过这句话的指令全部nop，实际上只要nop第一个je和接下来的两个jnz就行，但是这个程序改了之后保存不下来，不知道为何，据说是有壳。 </strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crack001-Acid-burn&quot;&gt;&lt;a href=&quot;#Crack001-Acid-burn&quot; class=&quot;headerlink&quot; title=&quot;Crack001-Acid_burn&quot;&gt;&lt;/a&gt;Crack001-Acid_burn&lt;/h1&gt;&lt;h2 id=&quot;关于题目&quot;&gt;&lt;a href=&quot;#关于题目&quot; class=&quot;headerlink&quot; title=&quot;关于题目&quot;&gt;&lt;/a&gt;关于题目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;所用工具为OllyDBG，开始想用IDA，但是发现并不适合动态调试（也许将来打脸）。&lt;/li&gt;
&lt;li&gt;题目中需要破解的是两个序列号，一个是一串字符，一个是两串，一串字符的往往是硬编码在程序内部，而两串的可以通过一定计算设计得复杂一点，通过研读指令才能破解。注册机需要完全理解汇编指令才能编写，注册机晚些在补。（截图之后再补2018.4.2）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="逆向破解" scheme="http://noblestaspiration.net/tags/%E9%80%86%E5%90%91%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="Crack" scheme="http://noblestaspiration.net/tags/Crack/"/>
    
      <category term="反汇编" scheme="http://noblestaspiration.net/tags/%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>加密与解密学习</title>
    <link href="http://noblestaspiration.net/2018/03/30/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    <id>http://noblestaspiration.net/2018/03/30/加密与解密/</id>
    <published>2018-03-30T11:05:07.190Z</published>
    <updated>2018-05-15T12:23:34.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Crack工具"><a href="#Crack工具" class="headerlink" title="Crack工具"></a>Crack工具</h1><h2 id="Ollydbg"><a href="#Ollydbg" class="headerlink" title="Ollydbg"></a>Ollydbg</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>F7-单步调试，如果遇到函数调用，会进入函数主体。shift+F7-单步调试，但是遇到中断，调试器会尝试进入被调试程序指定的异常处理。Ctrl+F7-自动步入，断点，异常会停下来，ESC可退出</li><li>F8-单步调试，遇到调用会一次执行完这个函数，shift和Ctrl和F7一样</li></ul><a id="more"></a><ul><li>F4-运行到选定位置，也就是运行到光标所在的位置。</li><li>Ctrl+F9-运行到return返回。</li><li>Alt+F9-执行到用户代码，也就是程序领空。</li></ul><ul><li>F9-让程序继续执行，shift和Ctrl和F7一样，alt+F9-执行直到返回用户代码段</li><li>Ctrl+F11-Run跟踪步入</li><li>F12 - 停止程序执行，同时暂停被调试程序的所有线程。</li><li>Ctrl+F12 - Run跟踪步过，一条一条执行命令，但是不进入子函数调用，并把寄存器的信息加入到Run跟踪的存储数据中。Run跟踪不会同步更新CPU窗口。</li><li>Alt+B - 显示断点窗口。在这个窗口中，可以编辑、删除、或跟进到断点处。</li><li>Alt+C - 显示CPU窗口。</li><li>Alt+E - 显示模块列表［list of modules］。</li><li>Alt+K - 显示调用栈［Call stack］窗口。</li><li>Alt+L - 显示日志窗口。</li><li>Alt+M - 显示内存窗口。</li><li>Alt+O - 显示选项对话框［Options dialog］</li><li>Ctrl+P - 显示补丁窗口。</li><li>Ctrl+T - 打开Run跟踪 对话框</li><li>Alt+X - 关闭 OllyDbg。</li><li>Ctrl+E -以二进制（十六进制）格式编辑所选内容。</li><li>Ctrl+F -开始命令搜索。</li><li>Ctrl+G -转到某地址。</li><li>Ctrl+K - 查看与当前函数相关的调用树［Call tree］。在用这个功能之前，必须使用分析代码功能。</li><li>Ctrl+L - 搜索下一个，重复上一次的搜索内容。</li><li>Ctrl+N - 打开当前模块的名称（标签）列表。</li><li>Ctrl+O - 扫描object文件。扫描Object文件。该命令会显示扫描Object文件对话框，您可以在该对话框中选择Object文件或者lib文件，并扫描这个文件，试图找到在实际代码段中用到的目标模块。</li><li>Ctrl+S -命令搜索。</li><li>分号是注释</li></ul><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><ul><li>快捷键<ul><li>j（jump）表示跳转</li><li>o（offset）便是偏移值</li><li>p（procedure）表示子程序，回车或双击可跳</li><li>字符上按X可以打开交叉参考窗口</li><li>M键为重命名，alt+M标记当前位置，Ctrl+M跳到标记位置，选择要跳的位置双击就过去了</li><li>U让所有代码以数据的形式显示出来，C重新分析代码</li><li><code>F12会出现函数执行的流程图</code> ，按空格可以相互之间转化</li><li>Alt+T查找字符串</li><li>XREF:交叉引用</li><li>​</li><li>碰到地址的时候右键选择H，就会显示在这个栈帧中实际的位置，十六进制的，双击变量，变量会调到详细的视图</li><li>​</li></ul></li><li>图形视图<ul><li>蓝色，顺序执行</li><li>绿色，条件执行（YES）</li><li>红色，条件执行（NO）</li></ul></li><li>文本视图<ul><li>箭头实线表示非条件跳转，虚线表示条件跳转</li><li>向下箭头加上jump表示跳转</li></ul></li><li>IDC作为IDA的一个重要组成，是一种嵌入式语言，一些反汇编的任务需要IDC的协助，如对代码进行加密程序，可以用IDC先写一段解密代码，在解密后反汇编就可以得到正确的反汇编结果</li><li>IDA另一个重要特征是库文件的快速识别与鉴定。</li><li>四种区段：<ul><li>.text：代码段</li><li>.data：数据段</li><li>.rdata：只读数据段</li><li>.bss：未初始化数据段</li></ul></li></ul><p>这里给出一个比较好的学习网址：<a href="https://blog.csdn.net/fishmai/article/details/52398376" target="_blank" rel="noopener">https://blog.csdn.net/fishmai/article/details/52398376</a></p><h2 id="汇编相关"><a href="#汇编相关" class="headerlink" title="汇编相关"></a>汇编相关</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul><li>EBP是存取某个时刻的栈顶指针，ESP是一直指向栈顶的指针，以方便对栈的操作</li></ul><h3 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h3><ul><li>sete指令，cmp eax，ecx  sete cl，如果eax=ecx，那么cl为1，否则为0 </li></ul><h2 id="杂项知识点"><a href="#杂项知识点" class="headerlink" title="杂项知识点"></a>杂项知识点</h2><ul><li>PE—Portable Executable可执行文件</li><li>很多工具在反汇编的时候可能无法正确区分数据和代码，有些程序就是用这个来对抗静态反汇编</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Crack工具&quot;&gt;&lt;a href=&quot;#Crack工具&quot; class=&quot;headerlink&quot; title=&quot;Crack工具&quot;&gt;&lt;/a&gt;Crack工具&lt;/h1&gt;&lt;h2 id=&quot;Ollydbg&quot;&gt;&lt;a href=&quot;#Ollydbg&quot; class=&quot;headerlink&quot; title=&quot;Ollydbg&quot;&gt;&lt;/a&gt;Ollydbg&lt;/h2&gt;&lt;h3 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;F7-单步调试，如果遇到函数调用，会进入函数主体。shift+F7-单步调试，但是遇到中断，调试器会尝试进入被调试程序指定的异常处理。Ctrl+F7-自动步入，断点，异常会停下来，ESC可退出&lt;/li&gt;
&lt;li&gt;F8-单步调试，遇到调用会一次执行完这个函数，shift和Ctrl和F7一样&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="加密解密" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/"/>
    
      <category term="逆向分析" scheme="http://noblestaspiration.net/categories/%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Ollydbg" scheme="http://noblestaspiration.net/tags/Ollydbg/"/>
    
      <category term="Crack" scheme="http://noblestaspiration.net/tags/Crack/"/>
    
      <category term="IDA" scheme="http://noblestaspiration.net/tags/IDA/"/>
    
      <category term="汇编与反汇编" scheme="http://noblestaspiration.net/tags/%E6%B1%87%E7%BC%96%E4%B8%8E%E5%8F%8D%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C学习笔记</title>
    <link href="http://noblestaspiration.net/2018/03/26/Objective-C%E7%AC%94%E8%AE%B0/"/>
    <id>http://noblestaspiration.net/2018/03/26/Objective-C笔记/</id>
    <published>2018-03-26T13:22:05.673Z</published>
    <updated>2018-04-02T14:19:17.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Objective-C笔记"><a href="#Objective-C笔记" class="headerlink" title="Objective-C笔记"></a>Objective-C笔记</h2><ul><li>.m文件代表的是message，指的是OC的一种主要特性。</li><li>#import是让编译器在头文件中查询定义</li><li>框架是一种聚集在一个单元的部件集合，包含头文件，库，图像，声音文件等，Foundation框架的头文件Foundation.h包含一百多个文件，一旦使用<code>#import&lt;Foundation/Foundation.h&gt;</code>， 那么将会获得全部集合。</li><li>argc是命令行总的参数个数,argv[]是argc个参数，其中第0个参数是程序的全名，以后的参数命令行后面跟的用户输入的参数，char *argv[]是一个字符数组,其大小是int argc,主要用于命令行参数argv[]参数，数组里每个元素代表一个参数</li></ul><a id="more"></a><ul><li><strong>特别的.h文件和.m文件build之前一定要将.h文件右键properties-&gt;advance下的compiler…改为objc，这在环境搭建的blog也有提到</strong></li></ul><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//头文件Fraction.h</span><br><span class="line">#import&lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface Fraction:NSObject</span><br><span class="line">&#123;</span><br><span class="line">  int numerator;</span><br><span class="line">  int denominator;//成员变量，这里是private的字段，数据存储在字段中，修改字段才修改数据。封装起来，保证数据安全。</span><br><span class="line">&#125;</span><br><span class="line">-(void) print;</span><br><span class="line">-(void) setNumerator:(int) n;</span><br><span class="line">-(void) setDenominator:(int) d;</span><br><span class="line">-(int) numerator;</span><br><span class="line">-(int) denominator;//这里是属性，有get和set方法</span><br><span class="line">//.m文件</span><br><span class="line">#import&lt;stdio.h&gt;</span><br><span class="line">#import&quot;Fraction.h&quot;</span><br><span class="line">@implementation Fraction</span><br><span class="line">-(void) print</span><br><span class="line">&#123;</span><br><span class="line">  printf(&quot;%i/%i&quot;,numerator,denominator);</span><br><span class="line">&#125;</span><br><span class="line">-(void) setNumeration:(int) n</span><br><span class="line">&#123;</span><br><span class="line">  numerator=n;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">-(int) denominator</span><br><span class="line">&#123;</span><br><span class="line">  return denominator;//属性中get方法，这样上面print可以访问成员变量</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">//main函数中使用</span><br><span class="line">//头文件中要包含：Fraction.h</span><br><span class="line">Fraction *frac=[[Fraction alloc] init];</span><br><span class="line">[frac print];</span><br><span class="line">[frac setNumeration:1];</span><br><span class="line">[frac release];</span><br><span class="line">//多个参数,-(void)setNumerator:(int) n andDeminator:(int) d;</span><br></pre></td></tr></table></figure><h3 id="构造子，先看一下构造函数和析构函数-的区别。"><a href="#构造子，先看一下构造函数和析构函数-的区别。" class="headerlink" title="构造子，先看一下构造函数和析构函数 的区别。"></a>构造子，先看一下<a href="http://www.runoob.com/cplusplus/cpp-constructor-destructor.html" target="_blank" rel="noopener">构造函数和析构函数</a> 的区别。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//.h里面的声明</span><br><span class="line">-(Fraction*) initWithNumerator:(int)n denomination:(int)d</span><br><span class="line">//.m具体实现方法</span><br><span class="line">-(Fraction*) initWithNumerator:(int)n denomination:(int)d</span><br><span class="line">&#123;</span><br><span class="line">  _self=[super init];</span><br><span class="line">  if(_self)</span><br><span class="line">  &#123;</span><br><span class="line">    [_self setNumerator:n andDenomitor:d];</span><br><span class="line">  &#125;</span><br><span class="line">  return _self;</span><br><span class="line">&#125;//if(_self)等同if(_self!=nil),nil等同于NULL，</span><br><span class="line">//main函数中实现</span><br><span class="line">Fraction *frac3 = [[Fraction alloc] initWithNumerator: 3 denominator: 10];</span><br><span class="line">printf( &quot;Fraction 3 is: &quot; );</span><br><span class="line">[frac3 print];</span><br><span class="line">printf( &quot;\n&quot; );</span><br></pre></td></tr></table></figure><ul><li>self 是指指向自己的指针</li></ul><h3 id="Class-level-access"><a href="#Class-level-access" class="headerlink" title="Class level access"></a>Class level access</h3><ul><li><strong>前面带有减号(-) 的方法为实例方法，必须使用类的实例才可以调用的。对应的有+号， 代表是类的静态方法，不需要实例化即可调用。</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//ClassA.h</span><br><span class="line">#import &lt;Foundation/NSObject.h&gt;</span><br><span class="line">  static int count;</span><br><span class="line">@interface ClassA: NSObject</span><br><span class="line">+(int) initCount;</span><br><span class="line">+(void) initialize;</span><br><span class="line">@end</span><br><span class="line">//ClassA.m</span><br><span class="line">#import &quot;ClassA.h&quot;</span><br><span class="line">@implementation ClassA</span><br><span class="line">-(id) init</span><br><span class="line">&#123;</span><br><span class="line">_self = [super init];</span><br><span class="line">count++;</span><br><span class="line">return _self;</span><br><span class="line">&#125;</span><br><span class="line">+(int) initCount</span><br><span class="line">&#123;</span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line">+(void) initialize</span><br><span class="line">&#123;</span><br><span class="line">count = 0;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">main.m</span><br><span class="line">#import &quot;ClassA.h&quot;</span><br><span class="line">#import &lt;stdio.h&gt;</span><br><span class="line">int main( int argc, const char *argv[] )</span><br><span class="line">&#123;</span><br><span class="line">ClassA *c1 = [[ClassA alloc] init];</span><br><span class="line">ClassA *c2 = [[ClassA alloc] init];</span><br><span class="line">// print count</span><br><span class="line">printf( &quot;ClassA count: %i\n&quot;, [ClassA initCount] );</span><br><span class="line">ClassA *c3 = [[ClassA alloc] init];</span><br><span class="line">// print count again</span><br><span class="line">printf( &quot;ClassA count: %i\n&quot;, [ClassA initCount] );</span><br><span class="line">[c1 release];</span><br><span class="line">[c2 release];</span><br><span class="line">[c3 release];</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">output:</span><br><span class="line">ClassA count: 2</span><br><span class="line">ClassA count: 3</span><br></pre></td></tr></table></figure><ul><li><p><strong>类方法用类名访问，实例方法用示例名访问。静态方法可以直接调用,实例方法要先成生实例,通过实例调用方法，静态速度很快，但是多了会占内存。静态内存是连续的,因为是在程序开始时就生成了,而实例申请的是离散的空间,所以当然没有静态方法快，而且静态内存是有限制的，太多了程序会启动不了。</strong></p></li><li><p><strong>类方法可以计算一个实体被instance几次，还可以共享数据，它不需要访问或者修改某个实例的成员变量。类方法一般用于实现一些工具方法，比如对某个对象进行扩展，或者实现单例。如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。 </strong></p><blockquote><p><code>插入一点:windows要通过各种各样的句柄来标识诸如应用程序实例，窗口，图标菜单等对象。句柄的实际值对程序来讲无光紧要，这个值是用来引用相应对象的。句柄与普通指针的区别在于，指针包含的是引用对象的内存地址，而句柄则是由系统所管理的引用标识，该标识可以被系统重新定位到一个内存地址上。这种间接访问对象的模式增强了系统对引用对象的控制。</code></p></blockquote></li></ul><h3 id="这里留给异常"><a href="#这里留给异常" class="headerlink" title="这里留给异常"></a>这里留给异常</h3><h3 id="继承多态以及其他实体导向功能"><a href="#继承多态以及其他实体导向功能" class="headerlink" title="继承多态以及其他实体导向功能"></a>继承多态以及其他实体导向功能</h3><h4 id="ID类型"><a href="#ID类型" class="headerlink" title="ID类型"></a>ID类型</h4><ul><li>Objective-C有一种id的类型，操作有些像void*，不过它却严格规定只能用在实体上。Objective-C与Java、C++不一样，在调用一个实体的方法时，并不需要知道这个实体的类型。当然，这个方法一定要存在，在称为Objective-C的消息传递。这种动态连接有显而易见的好处。你不需要知道你调用的方法的那个实体是什么类型，如果这个实体对这个消息有反应，那就会调用这个方法。这也不会牵涉到一堆繁琐的类型转换，比如在Java里调用一个整形实体的.intValue()就要先转换，然后才能调用这个方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id number;</span><br><span class="line">number=comp;</span><br><span class="line">[number print];</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>关于<em>_self=[super init]</em> ，下面一段代码</p><ul><li>[super init]的作用：面向对象的体现，先利用父类的init方法为子类实例的父类部分属性初始化。在iOS下，所有的类都继承于NSObject，而NSObject的init方法很简单，就是return _self。当父类的初始化完成之后，即_self不为nil的情况下，就可以开始做子类的初始化了。</li><li>把[_self init]付给_self，防止父类release掉了self指向的空间并重新获得alloc了一块空间，如果[self init]alloc失败，则不执行if语句内容。</li><li>super作为消息接受者的实质：<strong>super并不是真正的指针，[super message]的实质是由self来接受父类的message。</strong>需要注意的是，[super message]中，message方法出现的self为[super message]语境中的self，即子类实例。</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_self=[super init];</span><br><span class="line">if(_self)</span><br><span class="line">&#123;</span><br><span class="line">    [_self setWidth:w height:h];</span><br><span class="line">&#125; </span><br><span class="line">return _self;</span><br></pre></td></tr></table></figure><ul><li>重要一点：<strong>if( self = [super init] )这是一种通常的建议写法，赋值并测零只是为了防止超类在初始化过程中发生改变，返回了不同的对象</strong></li></ul><p><strong>注：所有self前面均无_，只是hexo的时候会报错，所以选择加上</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Objective-C笔记&quot;&gt;&lt;a href=&quot;#Objective-C笔记&quot; class=&quot;headerlink&quot; title=&quot;Objective-C笔记&quot;&gt;&lt;/a&gt;Objective-C笔记&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;.m文件代表的是message，指的是OC的一种主要特性。&lt;/li&gt;
&lt;li&gt;#import是让编译器在头文件中查询定义&lt;/li&gt;
&lt;li&gt;框架是一种聚集在一个单元的部件集合，包含头文件，库，图像，声音文件等，Foundation框架的头文件Foundation.h包含一百多个文件，一旦使用&lt;code&gt;#import&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/code&gt;， 那么将会获得全部集合。&lt;/li&gt;
&lt;li&gt;argc是命令行总的参数个数,argv[]是argc个参数，其中第0个参数是程序的全名，以后的参数命令行后面跟的用户输入的参数，char *argv[]是一个字符数组,其大小是int argc,主要用于命令行参数argv[]参数，数组里每个元素代表一个参数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://noblestaspiration.net/categories/Objective-C/"/>
    
    
      <category term="Objective-C" scheme="http://noblestaspiration.net/tags/Objective-C/"/>
    
      <category term="languish" scheme="http://noblestaspiration.net/tags/languish/"/>
    
  </entry>
  
  <entry>
    <title>Windows下搭建OC环境</title>
    <link href="http://noblestaspiration.net/2018/03/26/Windows%E4%B8%8B%E6%90%AD%E5%BB%BAOC%E7%8E%AF%E5%A2%83/"/>
    <id>http://noblestaspiration.net/2018/03/26/Windows下搭建OC环境/</id>
    <published>2018-03-26T08:23:07.368Z</published>
    <updated>2018-03-31T01:53:14.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Objective-C编译器"><a href="#安装Objective-C编译器" class="headerlink" title="安装Objective-C编译器"></a>安装Objective-C编译器</h1><p>需安装文件地址：<a href="https://pan.baidu.com/s/1qkS-7_EBuj4ofd9gHtdHcA" target="_blank" rel="noopener">链接</a> ，密码是：lm8y</p><ul><li>先安装OC的编译器，这里使用的是GNUstep，安装次序为：gnustep-msys-system、gnustep-core、gnustep-devel，我安装再d盘，下面路径皆以d盘开始</li><li>接着安装IDE，选择codeblocks作为IDE</li></ul><a id="more"></a><h1 id="配置开发环境"><a href="#配置开发环境" class="headerlink" title="配置开发环境"></a>配置开发环境</h1><ul><li>先进入<strong>setting-&gt;Compiler anddebugger…</strong>,进去之后选择<strong>GUN GCC Compiler</strong>，按<strong>copy</strong>按钮，将其重新命名为<strong>GUNstep MinGW Compiler</strong>，如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/1.jpg" alt="第一步"></p><p>这里一定要将<strong>selected compiler</strong>选择到<strong>GUNstep MinGW Compiler</strong>，然后点击<strong>set as default</strong>。勾选如图的两个选项。</p><ul><li>然后在<strong>compiler flags</strong>旁边的<strong>other compiler options</strong>里面添加这句话：<strong>-fconstant-string-class=NSConstantString -std=c99 </strong></li><li>在<strong>linker setting</strong>中添加两个链接，分别链接到<strong>libgnustep-base.dll.a</strong>和<strong>libobjc.dll.a</strong>，我的<strong>GUNstep</strong>是安装在D盘，所以路径依次是：<code>D:\GNUstep\GNUstep\System\Library\Libraries\libgnustep-base.dll.a</code> 和<code>D:\GNUstep\GNUstep\System\Library\Libraries\libobjc.dll.a</code> 如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/2.jpg" alt="链接文件"></p><ul><li>指定搜索目录，<strong>Search directories</strong>，这里有两处需要指定，第一是<strong>compiler</strong>，将其设置为<code>D:\GNUstep\GNUstep\System\Library\Headers</code> 第二处是linker，将其设置为<code>D:\GNUstep\GNUstep\System\Library\Libraries</code> 这两个不能写为同一个路径。如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/3.jpg" alt="设置搜索路径"></p><p><img src="http://p6flo4av7.bkt.clouddn.com/4.jpg" alt="设置搜索路径"></p><h1 id="添加Objective-C文件支持类型"><a href="#添加Objective-C文件支持类型" class="headerlink" title="添加Objective-C文件支持类型"></a>添加Objective-C文件支持类型</h1><ul><li><p>进入<strong>Settings-&gt;Environment…</strong>，选择<strong>Files extension handling</strong> 添加<strong>*.m</strong>。如图：</p><p><img src="http://p6flo4av7.bkt.clouddn.com/5.jpg" alt="添加.m文件"></p></li><li><p>然后新建一个项目，在<strong>project-&gt;project tree-&gt;categories…</strong>下面将<strong>*.m</strong>添加到<strong>source</strong>下，一定要注意前面使用<code>;</code> 分号分开的，如下图：</p></li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/6.jpg" alt="添加.m文件"></p><ul><li>进入<strong>Settings-&gt;Editor…</strong>，选择<strong>Syntaxhighlighting</strong>，点击<strong>Filemasks….</strong>按钮，在弹出框尾部添加*.m 到文件类型。如图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/7.jpg" alt="添加.m文件"></p><ul><li>然后点击<strong>Keywords…</strong>按钮 (紧靠<strong>Filemasks…</strong>按钮) 添加下面<strong>Objective-C</strong>的关键字到<strong>EditKeywords</strong>列表中。如图：</li></ul><blockquote><p><strong>@interface @implementation @end  @class @selector @protocol @public @protected @private id BOOL YES NO SEL nil  NULL self</strong></p></blockquote><p><img src="http://p6flo4av7.bkt.clouddn.com/8.jpg" alt="添加.m文件"></p><p>这就大体完成了。</p><h1 id="测试部分"><a href="#测试部分" class="headerlink" title="测试部分"></a>测试部分</h1><ul><li>测试代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">int main (int argc, const char *argv[])</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    NSAutoreleasePool *pool =[[NSAutoreleasePool alloc] init];</span><br><span class="line"></span><br><span class="line">    NSLog(@&quot;%@&quot;,@&quot;hello world&quot;);</span><br><span class="line"></span><br><span class="line">    [pool drain];</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试之前要在工程目录下新建一个.m文件，然后在编译器中右键这个文件，选择两个选项，如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/9.jpg" alt="测试"></p><ul><li>.h文件也必须选择上面这一步，而且在options下面一个选项properties里面，必须这样选择properties-&gt;advanced-&gt;compiler-&gt;variable里面改为objc，这时候编译才能通过</li></ul><p>#一点补充</p><ul><li>关于代码高亮：在<strong>setting-&gt;editor</strong>里面，选择<strong>Syntax highlighting</strong>，然后选择<strong>objective c</strong>，点击filemasks…然后添加*.m，注意，后面加上<code>，</code>号,如下图：</li></ul><p><img src="http://p6flo4av7.bkt.clouddn.com/10.jpg" alt="代码高亮"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Objective-C编译器&quot;&gt;&lt;a href=&quot;#安装Objective-C编译器&quot; class=&quot;headerlink&quot; title=&quot;安装Objective-C编译器&quot;&gt;&lt;/a&gt;安装Objective-C编译器&lt;/h1&gt;&lt;p&gt;需安装文件地址：&lt;a href=&quot;https://pan.baidu.com/s/1qkS-7_EBuj4ofd9gHtdHcA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt; ，密码是：lm8y&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先安装OC的编译器，这里使用的是GNUstep，安装次序为：gnustep-msys-system、gnustep-core、gnustep-devel，我安装再d盘，下面路径皆以d盘开始&lt;/li&gt;
&lt;li&gt;接着安装IDE，选择codeblocks作为IDE&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Stall IDE" scheme="http://noblestaspiration.net/categories/Stall-IDE/"/>
    
    
      <category term="Objective-C" scheme="http://noblestaspiration.net/tags/Objective-C/"/>
    
      <category term="Windows" scheme="http://noblestaspiration.net/tags/Windows/"/>
    
      <category term="GNUstep" scheme="http://noblestaspiration.net/tags/GNUstep/"/>
    
  </entry>
  
  <entry>
    <title>一点makedown</title>
    <link href="http://noblestaspiration.net/2018/03/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-makedown/"/>
    <id>http://noblestaspiration.net/2018/03/15/第一篇文章-makedown/</id>
    <published>2018-03-15T14:17:57.454Z</published>
    <updated>2018-03-30T02:23:34.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先写一点自己可能用得上的语法</p></blockquote><p>有几个#号就是几级标题</p><h1 id="一级"><a href="#一级" class="headerlink" title="一级"></a>一级</h1><h2 id="二级"><a href="#二级" class="headerlink" title="二级"></a>二级</h2><h3 id="三级"><a href="#三级" class="headerlink" title="三级"></a>三级</h3><h4 id="四级"><a href="#四级" class="headerlink" title="四级"></a>四级</h4><blockquote><p>这是&gt;加空格</p><blockquote><p>两个&gt;加空格</p></blockquote></blockquote><a id="more"></a><ul><li>一个<em>号加空格表示强调，可以在句中表示强调不过要以什么符号开始，就以什么结束，例子</em>这个是星号*，如果回车还是一样的格式，不想这样要这个格式，那就再回车一下</li><li><ul><li>回车再*号就会是空心小圆圈</li></ul></li></ul><ul><li>一个-减号也是一个小黑点这样</li></ul><p>像这样-–，***变成一个分隔符</p><hr><p>链接有两种形式：</p><ul><li>行内式：链接可以用[]加上()这样来书写，[]中间写链接内容，()中间写链接地址</li></ul><p>​         <a href="noblestaspiration.net">我博客链接</a></p><ul><li><p>参考式：两个[]连起来</p><p>例子:<a href="noblestaspiration.net" title="mine">我的博客</a></p></li></ul><ul><li>&lt;noblestaspiration.net&gt;   自动链接</li></ul><p>三个`这个符号是代码区，紧跟在三个符号后面的是语言类型，可以写Python或者C啊这些</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;<span class="number">111111</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个``中间写的内容会变成其他颜色，但是第一个符号要加上空格</p><p><code>这就是其他颜色</code></p><p>插入图片是![]（）其中[]中填的是图片名称，后面写的是路径加上图片的名称，名称一定要加上类型，比如.jpg什么的，下面插一张图片</p><p><img src="/2018/03/15/第一篇文章-makedown/D:/MyBlog\hexo\source\uploads\123.jpg" alt="123"></p><blockquote class="blockquote-center">这里是内容</blockquote><p>一对&lt;&gt;里面写blockquote class=”blockquote-center”这是搞一个像留言板下面那样的一个区域然后后面再加上一对&lt;&gt;里面写/blockquote这样就行了</p><p>另外\反斜杠可以帮助插其他符号，下面的就是前面已经加上反斜杠了</p><p>+ </p><p>`</p><p>*</p><p>_</p><p>{}</p><p>[]</p><p>()</p><p>#</p><p>+</p><p>-</p><p>.</p><p>!</p><p>多级列表：</p><ul><li>这是第一级<ul><li>在上一行回车再回车之后tab再-加上空格</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先写一点自己可能用得上的语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有几个#号就是几级标题&lt;/p&gt;
&lt;h1 id=&quot;一级&quot;&gt;&lt;a href=&quot;#一级&quot; class=&quot;headerlink&quot; title=&quot;一级&quot;&gt;&lt;/a&gt;一级&lt;/h1&gt;&lt;h2 id=&quot;二级&quot;&gt;&lt;a href=&quot;#二级&quot; class=&quot;headerlink&quot; title=&quot;二级&quot;&gt;&lt;/a&gt;二级&lt;/h2&gt;&lt;h3 id=&quot;三级&quot;&gt;&lt;a href=&quot;#三级&quot; class=&quot;headerlink&quot; title=&quot;三级&quot;&gt;&lt;/a&gt;三级&lt;/h3&gt;&lt;h4 id=&quot;四级&quot;&gt;&lt;a href=&quot;#四级&quot; class=&quot;headerlink&quot; title=&quot;四级&quot;&gt;&lt;/a&gt;四级&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这是&amp;gt;加空格&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;两个&amp;gt;加空格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="学习" scheme="http://noblestaspiration.net/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="makedown" scheme="http://noblestaspiration.net/tags/makedown/"/>
    
      <category term="基础" scheme="http://noblestaspiration.net/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://noblestaspiration.net/2018/03/15/hello-world/"/>
    <id>http://noblestaspiration.net/2018/03/15/hello-world/</id>
    <published>2018-03-15T12:23:04.812Z</published>
    <updated>2018-03-15T12:23:04.812Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python常用模块集锦</title>
    <link href="http://noblestaspiration.net/2018/03/12/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9B%86%E9%94%A6/"/>
    <id>http://noblestaspiration.net/2018/03/12/Python常用模块集锦/</id>
    <published>2018-03-12T09:51:35.000Z</published>
    <updated>2018-03-19T16:16:53.592Z</updated>
    
    <content type="html"><![CDATA[<p>Python常用模块集锦</p><p>常用模块主要分为以下几类（缺失的后续再补充）：</p><ul><li>时间转换</li><li>时间计算</li><li>序列化和反序列化：<code>json</code>，<code>pickle</code></li><li>编解码：<code>unicode</code>，<code>base64</code></li><li>加解密：<code>md5</code>，<code>sha1</code>，<code>hmac_sha1</code>，<code>aes</code></li><li>常见装饰器：<ul><li>计算执行时间装饰器</li><li>缓存装饰器</li><li>错误重试装饰器</li><li>延迟装饰器</li><li>尾递归优化装饰器</li></ul></li><li><code>ini</code>配置文件读取</li></ul><a id="more"></a><p>代码整合如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on 9/21/17 1:46 PM</span></span><br><span class="line"><span class="string">@author: Chen Liang</span></span><br><span class="line"><span class="string">@function: python常用模块集锦，util.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BEFORE = <span class="number">1</span></span><br><span class="line">LATER = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Python通用单元：不好归类但常用的方法此处添加"""</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeTransferUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""时间相关的常见转换方法"""</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""时间相关的常见计算方法"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">str_to_date</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerializeUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""序列化和反序列化：json, pickle"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">json_loads</span><span class="params">(json_str, encoding=None)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = json.loads(s=json_str, encoding=encoding)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, obj</span><br><span class="line">        <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">json_dumps</span><span class="params">(obj)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            json_str = json.dumps(obj=obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, json_str</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickle_loads</span><span class="params">(pickle_str)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = pickle.loads(pickle_str)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, obj</span><br><span class="line">        <span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pickle_dumps</span><span class="params">(obj)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            pickle_str = pickle.dumps(obj)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, pickle_str</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodecUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""编解码相关常见方法：base64 unicode"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base64_encode</span><span class="params">(data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, base64.b64encode(data)</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base64_decode</span><span class="params">(encoded_data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span>, base64.b64decode(encoded_data)</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span>, str(e)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_unicode</span><span class="params">(s, encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> s <span class="keyword">if</span> isinstance(s, unicode) <span class="keyword">else</span> unicode(s, encoding)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unicode_to</span><span class="params">(unicode_s, encoding=<span class="string">'utf-8'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> unicode_s.encode(encoding)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CryptoUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""加解密相关常见方法： md5 aes"""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5</span><span class="params">(str_object)</span>:</span></span><br><span class="line">        <span class="string">"""md5"""</span></span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(str_object)</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_encrypt</span><span class="params">(s, key, salt, mode=AES.MODE_CBC)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        aes加密</span></span><br><span class="line"><span class="string">        :param s: 待加密字符串</span></span><br><span class="line"><span class="string">        :param key: 密钥</span></span><br><span class="line"><span class="string">        :param salt: 盐, 16bit eg. b'0000000101000000'</span></span><br><span class="line"><span class="string">        :param mode: AES模式</span></span><br><span class="line"><span class="string">        :return: 加密后的字符串</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt)</span><br><span class="line">        n_text = s + (<span class="string">'\0'</span> * (<span class="number">16</span> - (len(s) % <span class="number">16</span>)))</span><br><span class="line">        <span class="keyword">return</span> b2a_hex(cipher.encrypt(n_text))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aes_decrypt</span><span class="params">(s, key, salt, mode=AES.MODE_CBC)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        aes解密</span></span><br><span class="line"><span class="string">        :param s: 待解密字符串</span></span><br><span class="line"><span class="string">        :param key: 密钥</span></span><br><span class="line"><span class="string">        :param salt: 盐, 16bit eg. b'0000000101000000'</span></span><br><span class="line"><span class="string">        :param mode: AES模式</span></span><br><span class="line"><span class="string">        :return: 解密后的字符串</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt)</span><br><span class="line">        <span class="keyword">return</span> cipher.decrypt(a2b_hex(s)).rstrip(<span class="string">'\0'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TailRecurseException</span>:</span></span><br><span class="line">    <span class="string">"""尾递归异常"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, args, kwargs)</span>:</span></span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""常见装饰器： 执行时间timeit，缓存cache，错误重试retry"""</span></span><br><span class="line"></span><br><span class="line">    __cache_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeit</span><span class="params">(fn)</span>:</span></span><br><span class="line">        <span class="string">"""计算执行时间"""</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            start = time.time()</span><br><span class="line">            ret = fn(*args, **kwargs)</span><br><span class="line">            end = time.time()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"@timeit: &#123;0&#125; tasks, &#123;1&#125; secs"</span>.format(fn.__name__, str(end - start))</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__is_expired</span><span class="params">(entry, duration)</span>:</span></span><br><span class="line">        <span class="string">"""是否过期"""</span></span><br><span class="line">        <span class="keyword">if</span> duration == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> time.time() - entry[<span class="string">'time'</span>] &gt; duration</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__compute_key</span><span class="params">(fn, args, kw)</span>:</span></span><br><span class="line">        <span class="string">"""序列化并求其哈希值"""</span></span><br><span class="line">        key = pickle.dumps((fn.__name__, args, kw))</span><br><span class="line">        <span class="keyword">return</span> hashlib.sha1(key).hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cache</span><span class="params">(cls, expired_time=<span class="number">-1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        缓存</span></span><br><span class="line"><span class="string">        :param expired_time: 过期时间，-1 表示不过期</span></span><br><span class="line"><span class="string">        :return: 返回缓存的结果或者计算的结果</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_cache</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                key = cls.__compute_key(fn, args, kwargs)</span><br><span class="line">                <span class="keyword">if</span> key <span class="keyword">in</span> cls.__cache_dict:</span><br><span class="line">                    <span class="keyword">if</span> cls.__is_expired(cls.__cache_dict[key], expired_time) <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">                        <span class="keyword">return</span> cls.__cache_dict[key][<span class="string">'value'</span>]</span><br><span class="line">                ret = fn(*args, **kwargs)</span><br><span class="line">                cls.__cache_dict[key] = &#123;</span><br><span class="line">                    <span class="string">'value'</span>: ret,</span><br><span class="line">                    <span class="string">'time'</span>: time.time()</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret</span><br><span class="line">            <span class="keyword">return</span> wrap</span><br><span class="line">        <span class="keyword">return</span> _cache</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retry</span><span class="params">(exceptions, retry_times=<span class="number">3</span>, time_pause=<span class="number">3</span>, time_offset=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        错误重试</span></span><br><span class="line"><span class="string">        :param exceptions: 单个异常比如ValueError, 或者tuple,元组元素是异常，比如(ValueError, TypeError)</span></span><br><span class="line"><span class="string">        :param retry_times: 重试次数</span></span><br><span class="line"><span class="string">        :param time_pause: 初始暂停时间</span></span><br><span class="line"><span class="string">        :param time_offset: 暂停时间的偏移倍数，默认不偏移</span></span><br><span class="line"><span class="string">        :return: 返回成功的值，或者重拾次数结束时抛出异常</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_retry</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                retry_times_tmp, time_pause_tmp = retry_times, time_pause</span><br><span class="line">                <span class="keyword">while</span> retry_times_tmp &gt; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">except</span> exceptions:</span><br><span class="line">                        time.sleep(time_pause_tmp)</span><br><span class="line">                        retry_times_tmp -= <span class="number">1</span></span><br><span class="line">                        time_pause_tmp *= time_offset</span><br><span class="line">                <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> wrap</span><br><span class="line">        <span class="keyword">return</span> _retry</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delay</span><span class="params">(delay_time=<span class="number">3</span>, mode=BEFORE)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        延迟装饰器，支持在函数执行之前和之后加延时，如果想在前后同时加，可以使用两次装饰。</span></span><br><span class="line"><span class="string">        time.sleep只会阻塞当前线程不会阻塞整个进程，其它线程不受影响</span></span><br><span class="line"><span class="string">        :param delay_time: 延迟时间，是float类型</span></span><br><span class="line"><span class="string">        :param mode: 模式，指定是在函数执行之前加延时还是在执行之后加，值为BEFORE(1)或者LATER(2)</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_delay</span><span class="params">(fn)</span>:</span></span><br><span class="line"><span class="meta">            @wraps(fn)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                <span class="keyword">if</span> mode == BEFORE:</span><br><span class="line">                    time.sleep(delay_time)</span><br><span class="line">                ret = fn(*args, **kwargs)</span><br><span class="line">                <span class="keyword">if</span> mode == LATER:</span><br><span class="line">                    time.sleep(delay_time)</span><br><span class="line">                <span class="keyword">return</span> ret</span><br><span class="line">            <span class="keyword">return</span> wrap</span><br><span class="line">        <span class="keyword">return</span> _delay</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tail_call_optimized</span><span class="params">(fn)</span>:</span></span><br><span class="line">        <span class="string">"""尾递归优化装饰器，如果被装饰函数不是尾递归函数则会报错"""</span></span><br><span class="line"><span class="meta">        @wraps(fn)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            f = sys._getframe()</span><br><span class="line">            <span class="keyword">if</span> f.f_back <span class="keyword">and</span> f.f_back.f_back <span class="keyword">and</span> f.f_back.f_back.f_code == f.f_code:</span><br><span class="line">                <span class="keyword">raise</span> TailRecurseException(args, kwargs)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="keyword">return</span> fn(*args, **kwargs)</span><br><span class="line">                    <span class="keyword">except</span> TailRecurseException <span class="keyword">as</span> e:</span><br><span class="line">                        args = e.args</span><br><span class="line">                        kwargs = e.kwargs</span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IniConfigParserUtil</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""ini配置文件读取"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *file_names)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        init</span></span><br><span class="line"><span class="string">        :param file_names: 包含多个元素的可迭代对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.config = ConfigParser.ConfigParser()</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> file_names:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.config.readfp(open(file_name, <span class="string">'rb'</span>))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            sys.exit(<span class="string">'All files have failed to read'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_string</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.get(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_int</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.getint(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_float</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.getfloat(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_boolean</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.config.getboolean(section, option)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_list</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ast.literal_eval(self.config.get(section, option))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_dict</span><span class="params">(self, section, option)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ast.literal_eval(self.config.get(section, option))</span><br></pre></td></tr></table></figure><p>缺失部分后续待添加，记得填坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python常用模块集锦&lt;/p&gt;
&lt;p&gt;常用模块主要分为以下几类（缺失的后续再补充）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间转换&lt;/li&gt;
&lt;li&gt;时间计算&lt;/li&gt;
&lt;li&gt;序列化和反序列化：&lt;code&gt;json&lt;/code&gt;，&lt;code&gt;pickle&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编解码：&lt;code&gt;unicode&lt;/code&gt;，&lt;code&gt;base64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;加解密：&lt;code&gt;md5&lt;/code&gt;，&lt;code&gt;sha1&lt;/code&gt;，&lt;code&gt;hmac_sha1&lt;/code&gt;，&lt;code&gt;aes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;常见装饰器：&lt;ul&gt;
&lt;li&gt;计算执行时间装饰器&lt;/li&gt;
&lt;li&gt;缓存装饰器&lt;/li&gt;
&lt;li&gt;错误重试装饰器&lt;/li&gt;
&lt;li&gt;延迟装饰器&lt;/li&gt;
&lt;li&gt;尾递归优化装饰器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ini&lt;/code&gt;配置文件读取&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://noblestaspiration.net/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noblestaspiration.net/tags/Python/"/>
    
      <category term="总结" scheme="http://noblestaspiration.net/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
