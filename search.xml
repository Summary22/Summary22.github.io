<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Crack007]]></title>
    <url>%2F2018%2F04%2F13%2FCrack007%2F</url>
    <content type="text"><![CDATA[Crack007-aLoNg3x.2关于题目 此题和上题很相似，但是具体内部实现是不一样的，而且本题的目标是写出注册机。同样的这个程序是用Delphi写的，无壳，程序隐藏两个按钮才达到破解，首先输入用户名和序列号，点击register，如果正确，register按钮隐藏，会出现一个again按钮，两个按钮全部隐藏既破解成功，另外有个about按钮，点击会弹出四个form，只是一些说明和提醒，还有一个cancella按钮，用于将序列号清零，当你输入的序列号不为纯数字的时候会跳出提醒，当输入序列号为0时也会弹出提示框。下面为程序初始状态： 解题思路借助DelphiDecompiler找到各个事件入口地址，用OllyDBG动态调试程序，在事件入口打断点，然后单步分析指令，分析逻辑关系，找出主要算法，写出注册机。 题解过程 用DelphiDecompiler打开exe文件查看各个按钮事件的入口地址并在下地址下断，事件后就为入口地址： 单步调试，查看算法，先查看register事件，输入用户名：qwer12，序列号：123456： 由于之前在register事件入口下断，所以程序会停在register事件入口，这时单步F8向下调试， 到这里可以看到，这个je跳过了提示框以及下面三个call，说明输入符合要求。继续F8运行， 到上面一步，这个跳转跳过了隐藏register按钮和显示again的关键call，按下esc往上一步看，test里面al的值决定这个跳转，再往上看，test上一条指令，call aLoNg3x_.00442FF2，很有可能这个call里面就有关键的算法，单步F7进去查看算法， F8单步到这一步的时候，可以看到一个关键的跳转，JNZ跳过了一句赋值语句，让bl为1的赋值语句，然后继续F8，当跳出函数，回到上图test语句的时候，这时al为0 将上一步的JNZ指令nop掉，让bl直接为1，可以看到，al的值也为1，并且register按钮隐藏，again按钮显示出来，再点击一下again按钮就破解成功了，如下图： 通过上面分析可以判断，上面图中，JNZ上一步的cmp为关键判断，这条指令比较的是寄存器EBX和ECX里面的值，再往上分析，去寻找EBX和ECX的算法。重新运行一下程序，然后单步进入关键call，从建立栈帧开始单步往下分析，下图所示，通过call取出用户名长度存在EAX中，然后通过cmp判断输入用户名是否合法，这里的限制条件是用户名必须大于4位。 继续往下调试，可以看到有两个循环 这里执行的算法是： 内层循环中，开始取输入的用户名的第一个字符和最后一个字符相乘，然后再与edi相乘，结果存在edx，最后将ebx与edx相加后结果存在ebx，比如上面例子中，输入用户名为qwer12，那么第一次就是字符q的asc码与字符2的asc码相乘，然后与edi里面的值相乘，最后加上ebx里面的值结果存在ebx。 因为esi第一次赋值为1，在内存循环中不变，所以在一次外层循环中，edx始终保持不变，对于外层循环来说，外层循环一次，等于输入用户名的一个字符依次乘用户名的所有字符，并乘edi，求和之后保存在ebx。 这里执行的时候上面有指令将ebx置0，那么变量只剩下edi了，程序调试中，edi始终为0，这就导致最后结果一直为零，关键判断不相等，跳过将bl置1的指令。所以需要寻找到edi的赋值指令，往上会看到 这条指令将eax的值给了edi，而前面的语句没有提及eax，所以要回到call外面去找，重新点击register，程序断下之后寻找eax赋值指令 在关键call上一条，将地址0x445830的值赋给eax了，但是这时这地址里的值为零，这时要寻找给这个地址赋值的指令，往上可以看到一条，mov dword ptr [0x445830],eax，但是这条指令被上面判断序列号是否合法的跳转语句跳过了，再往上找不到操作这个地址的指令了，可以判断，在mov dword ptr [0x445830], eax指令上一条call指令，很有可能包含eax的算法，分析这个call，可以找出eax的值。输入一个不合要求的序列号，带字母即可，单步进入这个call，进行分析。 上图输入不是数字的序列号，顺利进入到赋值语句之前的关键call里面，图中有一条指令cmp eax，0x5，这条指令要求输入序列号必须大于五位，所以这里的cmp置Z标志位为1，跳转指令跳过了关键算法，重新输入序列号，重新进入，分析主要算法。 这里算法只有一个for循环，刚开始将序列号长度取出存在eax，并将其赋给ebx，作为控制条件，然后取出序列号的第二个字符除以0x11的余数存在edx，然后再加一，取出序列号第一个字符与edx相乘，这算一次循环，下次操作第三个字符和第二个字符，循环五次，最后的结果加上0x37B。接着分析下面算法： 计算的结果存在eax中，然后结果除以0x7148，结果存在eax，余数存在edx，然后将结果转存在ebx，最后又将ebx的值返还给eax，计算的结果暂称为因子，因子的计算解决了对图十二分析时所遇到的问题，但这里要输入不合法字符串才能计算。接下来继续分析图十分析之后的算法： 首先将计算的结果存在eax，，然后对0xA2C2A进行取余，结果存在ebx，然后用输入的序列号除0x59，商保存在ecx，输入的序列号再对0x50取余，结果加上之前的ecx，最终结果再加一，然后和ebx值相比较，如果相等，则jnz不会跳转，bl的值会等于1，这时候，再回到这个call之外，将不会再将隐藏register按钮和显示again按钮的指令跳过，会执行，也就破解成功一半，again按钮的计算方法和register按钮就算方法一样，所以只要执行一遍对register按钮的操作，again按钮也将隐藏。 编写注册机 上面细致分析了算法，接下来就是根据算法编写注册机，下图为注册机界面： 在计算注册码的时候会生成多个，所以可以随机选择。 特别说明：（1）.在计算的时候，如果用户名字符串输入过长，或者长度小于6，都是属于不合法的用户名。输入过长的话，计算的时候，因为寄存器为32位，所以结果很可能溢出造成错误。经过测试，如果输入用户名为6个纯字母，结果溢出，所以用户名最好以数字和字母配合，而长度大于6位，很大几率造成溢出，如果选取asc码值比较小的符号当中用户名的话，情况会好一些。（这些可能是程序本身造成的限制） （2）.验证注册码是否正确的步骤应该是，随机填写用户名和注册码（这个注册码一定为不合法的注册码，也就是不要全为数字，这样edi的值才不为0），点击register键，出现提示框点掉，然后用注册机生成注册码，将生成的注册码重新填入程序，点击register，这时候register会消失，然后重新做一遍上述操作，again也会被隐藏，破解成功。 下图为随机验证： 破解之后会出现Cracked by casa63. 另外补上注册不成功的截图：]]></content>
      <categories>
        <category>加密解密</category>
        <category>注册机</category>
      </categories>
      <tags>
        <tag>Ollydbg</tag>
        <tag>DelphiDecompiler</tag>
        <tag>Delphi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Crack013]]></title>
    <url>%2F2018%2F04%2F04%2FCrack013%2F</url>
    <content type="text"><![CDATA[Crack013-badboy关于题目 通过PEID分析，此题是P-Code编码的VB程序，下图是未破解前程序所有状态。两种模式，一种是序列号，一种是名称加序列号（输入字符5个以上），输入不正确会出现Try Again字样。 解题思路如果此题采用OllyDBG动态分析，很难找到合适断点去修改指令破解。既然程序采用VB就可以使用VB.Decompiler进行静态分析并修改，达到破解的目的。 题解过程 首先使用PEID查壳，检测到是VB程序，如下图： 用VB.Decompiler加载exe文件，如下图 点击下方Combol1_Click事件进行分析，如下图 分别点击Command2和Command4进行进一步分析 根据分析，通过Disassemble找到判断语句对应的反汇编指令，在HEX Editor中搜索并进行更改，破解模式1：搜索4051DA并将1C改为1D或者将4051CA处FB 30改为FB 3D。破解模式二：搜索405815将1C改为1D或者将40580D处FB 30改为FB 3D，（部分指令含义见文章末尾附录），如下图： 破解成功截图 另外的方法：用OllyDBG来分析的话，可以找到正确密码，但是很难将其破解。简单介绍这种思路： 用OllyDBG将exe运行，选择断点：BreakPoint-&gt;VB APIs-&gt;Comaparision-&gt;_vbaStrcomp，然后F9运行程序，输入序列号：123456，点击try，F9运行程序会中断，看主模块的堆栈区，会显示出来正确的答案：7718158。 同理，名称加序列号模式也会出现正确序列号： 这时候名称不变再输入一次序列号57572-444610就会成功。 程序有一点特殊的地方：输入正确的序列号点try，显示”Congratulation !”和“OK”按钮，点OK按钮后，回到序列号页，又输入刚刚正确的的序列号，再次点try会显示”Try Again!”，这是因为在第一次注册成功的时候，根据上面分析Label3.caption被赋值：“Congratulation !”，只有再次输入Congratulation !才能再次成功，不再会跳出Try Again! 附录 跳转指令： Branch-无条件跳转-1E BranchT-栈顶数据为真则跳转-1D BranchF-栈顶数据为假则跳转-1C 比较指令： EqVarBool-比较变量相等：FB 33 NeVarBool-比较变量不相等：FB 40 EqStr-比较字符串相等：FB 30 NeStr-比较字符串不相等：FB 3D Lt-判断是否小于 Gt-判断是否大于 补充 这里补充一下栈帧的概念，栈帧是用来实现过程/函数调用一种数据结构（就是栈），也就是记录每次函数调用的相关信息的记录单元。这个参考网址里面的内容很经典 关键跳转前面一般都是关键call，所以要写注册机的话，往这里分析 idiv是有符号除法，影响的标志位有A,C,O,P,S,Z，32位中，隐含的除数有EDX和EAX，商存在EAX，余数存在EDX CDQ：这个指令把 EAX 的第 31 bit 复制到 EDX 的每一个 bit 上。 它大多出现在除法运算之前。它实际的作用只是把EDX的所有位都设成EAX最高位的值。也就是说，当EAX &lt;80000000, EDX 为00000000；当EAX &gt;= 80000000， EDX 则为FFFFFFFF。 标志位补充： O:Overflow，溢出标志 S:Sign，符号标志，结果为负置1 Z C:Carry Flag，进位 A：Auxiliary carry Flag，辅助进位标志，记录运算时第3位（半个字节）产生的进位，有进位为1 P：Parity，奇偶标志 D：Direction，方向标志 I：Interrupt，中断标志 T：Trap，陷阱标志]]></content>
      <categories>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Ollydbg</tag>
        <tag>Crack</tag>
        <tag>Badboy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Crack001]]></title>
    <url>%2F2018%2F04%2F02%2FCrack001%2F</url>
    <content type="text"><![CDATA[Crack001-Acid_burn关于题目 所用工具为OllyDBG，开始想用IDA，但是发现并不适合动态调试（也许将来打脸）。 题目中需要破解的是两个序列号，一个是一串字符，一个是两串，一串字符的往往是硬编码在程序内部，而两串的可以通过一定计算设计得复杂一点，通过研读指令才能破解。注册机需要完全理解汇编指令才能编写，注册机晚些在补。（截图之后再补2018.4.2） 破解过程 先用ODBG把程序运行起来，通过F8找到第一个弹框所调用的指令，然后F7单步进去，Ctrl+F8进一步定位弹框的位置，这一题，刚开始的弹框可有可无，可以迅速点击确定，然后继续点击Ctrl+F8继续运行，直到弹出下一个Form，这时候选择一个串那个，点进去，随便输一串，然后点击check，这时候，之前标记的断点起到作用了，当你看到call jmp User32.messagebox的时候，看主模块的堆栈区，找到离他最近的一个返回，右键进入反汇编，然后你会看到略微熟悉的UnIcode编码提醒，最后找到push ebp mov ebp esp，这两条指令，这两条指令是建立栈帧，然后往下寻找，找到JNZ，右键二进制，nop填充，这就破解完了，同理，两串的也是这样破解，但是这样破解唯一一点不好的地方就是不管你输什么进去都能进入，最好的方法是写注册机，这样会强大很多，这个后续一定会补上，截图后面也会补上。 这里还有第二种方法，比上面方法简单一些，我选用上面方法是因为根据参考网址 ，我的显示不了低地址的messagebox，无法去查找返回地址，然后我重新在虚拟机装了win7，这时候可以看见了，直接运行到弹出出错的form，然后去查找低地址的messagebox，右键查看调用，在这个call打断，然后继续点击check，这时候会停在断点，然后在主模块区的堆栈区找到第一条返回语句，然后右键查看反汇编，进去找一条JNZ的汇编语句，这时候看左边的实线，会看见跳转到sorry..的Unicode，Unicode语句在右边查看，将这句nop填充即可。 一点知识题目相关 发现问题：当点击左边两串，先输入一些字符，破解会失败，比如第一行输入123，第二行输入qwe，注册不会成功，这是因为程序本身在设计的时候就不允许输入字符少于三位。 汇编指令 JE，JNE，JNZ和JZ的区别，JE（jump equal）相等则跳转，JNE（jump not equal）不相等则跳转，JNZ结果不为零则跳转，JZ零标志为1就跳转。 [test和cmp的区别][https://blog.csdn.net/thanklife/article/details/11067731] 给出VB反汇编参考 总结 选择破解完01的时候，第二个选择破解09，当面对的是跳出成功和失败的页面的时候，往往可以通过先OD打开程序，先运行到密码输入错误界面，然后alt+k查看堆栈，找到massagebox查看调用，然后寻找跳转成功和失败的指令，nop掉失败的指令就爆破成功，随后的13题会单独写一篇 再来说08,08破解的方法和09很相似，有两种方法可选，第一是和09一样，运行程序直至出错，回到OD，按F12，然后去alt+K去堆栈看messageBox，查看调用（show call），然后在主模块的堆栈区，这时候一定要看提示的Unicode语句在主模块堆栈地址是否在程序领空，如果在领空的话，离他最近return右键看反汇编，上下翻动看到成功和失败的Unicode，然后查找跳转到失败的je，jNz等语句，让NOP掉这条指令就爆了，第二种方法，由于程序是VB，所以可以利用其API，BreakPoint -&gt;VB APIs-&gt;Comaparison-&gt;选上一切可疑的比如_vbaStrCmp,_vbaStrComp,_vbaVarCmpEq，然后点击确定的时候会中断，上下翻看程序是否有成功或者失败的提示，然后找到跳转NOP，这时候也可以看断点处是否在程序领空，如果在的话很可能就是那里。这种方法要看编译器 用VB.D…反编译出来的地址和OD里面一模一样，利用这个特性，其实可以把11题破了，但是要写出注册机很难，11题根据VB反编译器分析之后，可以Ctrl+G直接去含有判断的地方把跳过显示REGISTRIERT的跳转指令nop掉就可以，而且查找字符，无论是Unicode还是ASCII，都需要在程序的领空才能查到程序相关的字符，在超过程序领空的查不到 在这之后由看了04,04爆破可以在加载程序完之后选择查看asc码，看到恭喜注册成功双击进去，然后这里有一点小坑，上面的jnz指令，如果不点击程序图片的框的话，是不会运行到这里的，可以在这里下断试，把跳过成功这句jnz nop掉就可以，有时候会出现一直搜索不到的情况，那就先运行程序，F12暂停，alt+k查看堆栈，找到程序领空，show produce然后再查找就可以了 一般程序会从低地址开始加载，如果一开始运行程序的时候从F…开始的，那就是估计程序有那么一点毛病，我之前是在用OD加载之前运行了一下看，然后就从F..开始加载了，所以…讲不清 第五个，暴力破解，大概步骤是这样的，首先运行程序然后F9让其运行，然后F12中断，这时候alt+K，看到这里这个调用是在程序领空的，右键跟进去，进到主模块，右键查看ASC码，寻找“注册了”的字样，双击进去，把跳过这句话的指令全部nop，实际上只要nop第一个je和接下来的两个jnz就行，但是这个程序改了之后保存不下来，不知道为何，据说是有壳。]]></content>
      <categories>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Ollydbg</tag>
        <tag>Crack</tag>
        <tag>反汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加密与解密学习（一）]]></title>
    <url>%2F2018%2F03%2F30%2F%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86%2F</url>
    <content type="text"><![CDATA[Crack工具Ollydbg快捷键 F7-单步调试，如果遇到函数调用，会进入函数主体。shift+F7-单步调试，但是遇到中断，调试器会尝试进入被调试程序指定的异常处理。Ctrl+F7-自动步入，断点，异常会停下来，ESC可退出 F8-单步调试，遇到调用会一次执行完这个函数，shift和Ctrl和F7一样 F4-运行到选定位置，也就是运行到光标所在的位置。 Ctrl+F9-运行到return返回。 Alt+F9-执行到用户代码，也就是程序领空。 F9-让程序继续执行，shift和Ctrl和F7一样，alt+F9-执行直到返回用户代码段 Ctrl+F11-Run跟踪步入 F12 - 停止程序执行，同时暂停被调试程序的所有线程。 Ctrl+F12 - Run跟踪步过，一条一条执行命令，但是不进入子函数调用，并把寄存器的信息加入到Run跟踪的存储数据中。Run跟踪不会同步更新CPU窗口。 Alt+B - 显示断点窗口。在这个窗口中，可以编辑、删除、或跟进到断点处。 Alt+C - 显示CPU窗口。 Alt+E - 显示模块列表［list of modules］。 Alt+K - 显示调用栈［Call stack］窗口。 Alt+L - 显示日志窗口。 Alt+M - 显示内存窗口。 Alt+O - 显示选项对话框［Options dialog］ Ctrl+P - 显示补丁窗口。 Ctrl+T - 打开Run跟踪 对话框 Alt+X - 关闭 OllyDbg。 Ctrl+E -以二进制（十六进制）格式编辑所选内容。 Ctrl+F -开始命令搜索。 Ctrl+G -转到某地址。 Ctrl+K - 查看与当前函数相关的调用树［Call tree］。在用这个功能之前，必须使用分析代码功能。 Ctrl+L - 搜索下一个，重复上一次的搜索内容。 Ctrl+N - 打开当前模块的名称（标签）列表。 Ctrl+O - 扫描object文件。扫描Object文件。该命令会显示扫描Object文件对话框，您可以在该对话框中选择Object文件或者lib文件，并扫描这个文件，试图找到在实际代码段中用到的目标模块。 Ctrl+S -命令搜索。 分号是注释 IDA 快捷键 j（jump）表示跳转 o（offset）便是偏移值 p（procedure）表示子程序，回车或双击可跳 字符上按X可以打开交叉参考窗口 M键为重命名，alt+M标记当前位置，Ctrl+M跳到标记位置，选择要跳的位置双击就过去了 U让所有代码以数据的形式显示出来，C重新分析代码 F12会出现函数执行的流程图 图形视图 蓝色，顺序执行 绿色，条件执行（YES） 红色，条件执行（NO） 文本视图 箭头实线表示非条件跳转，虚线表示条件跳转 向下箭头加上jump表示跳转 IDC作为IDA的一个重要组成，是一种嵌入式语言，一些反汇编的任务需要IDC的协助，如对代码进行加密程序，可以用IDC先写一段解密代码，在解密后反汇编就可以得到正确的反汇编结果 IDA另一个重要特征是库文件的快速识别与鉴定。 汇编相关寄存器 EBP是存取某个时刻的栈顶指针，ESP是一直指向栈顶的指针，以方便对栈的操作 杂项知识点 PE—Portable Executable可执行文件 很多工具在反汇编的时候可能无法正确区分数据和代码，有些程序就是用这个来对抗静态反汇编]]></content>
      <categories>
        <category>加密解密</category>
      </categories>
      <tags>
        <tag>Ollydbg</tag>
        <tag>Crack</tag>
        <tag>汇编与反汇编</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Objective-C学习笔记]]></title>
    <url>%2F2018%2F03%2F26%2FObjective-C%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Objective-C笔记 .m文件代表的是message，指的是OC的一种主要特性。 #import是让编译器在头文件中查询定义 框架是一种聚集在一个单元的部件集合，包含头文件，库，图像，声音文件等，Foundation框架的头文件Foundation.h包含一百多个文件，一旦使用#import&lt;Foundation/Foundation.h&gt;， 那么将会获得全部集合。 argc是命令行总的参数个数,argv[]是argc个参数，其中第0个参数是程序的全名，以后的参数命令行后面跟的用户输入的参数，char *argv[]是一个字符数组,其大小是int argc,主要用于命令行参数argv[]参数，数组里每个元素代表一个参数 特别的.h文件和.m文件build之前一定要将.h文件右键properties-&gt;advance下的compiler…改为objc，这在环境搭建的blog也有提到 创建类12345678910111213141516171819202122232425262728293031323334353637//头文件Fraction.h#import&lt;Foundation/Foundation.h&gt;@interface Fraction:NSObject&#123; int numerator; int denominator;//成员变量，这里是private的字段，数据存储在字段中，修改字段才修改数据。封装起来，保证数据安全。&#125;-(void) print;-(void) setNumerator:(int) n;-(void) setDenominator:(int) d;-(int) numerator;-(int) denominator;//这里是属性，有get和set方法//.m文件#import&lt;stdio.h&gt;#import&quot;Fraction.h&quot;@implementation Fraction-(void) print&#123; printf(&quot;%i/%i&quot;,numerator,denominator);&#125;-(void) setNumeration:(int) n&#123; numerator=n;&#125;...-(int) denominator&#123; return denominator;//属性中get方法，这样上面print可以访问成员变量&#125;@end//main函数中使用//头文件中要包含：Fraction.hFraction *frac=[[Fraction alloc] init];[frac print];[frac setNumeration:1];[frac release];//多个参数,-(void)setNumerator:(int) n andDeminator:(int) d; 构造子，先看一下构造函数和析构函数 的区别。1234567891011121314151617//.h里面的声明-(Fraction*) initWithNumerator:(int)n denomination:(int)d//.m具体实现方法-(Fraction*) initWithNumerator:(int)n denomination:(int)d&#123; _self=[super init]; if(_self) &#123; [_self setNumerator:n andDenomitor:d]; &#125; return _self;&#125;//if(_self)等同if(_self!=nil),nil等同于NULL，//main函数中实现Fraction *frac3 = [[Fraction alloc] initWithNumerator: 3 denominator: 10];printf( &quot;Fraction 3 is: &quot; );[frac3 print];printf( &quot;\n&quot; ); self 是指指向自己的指针 Class level access 前面带有减号(-) 的方法为实例方法，必须使用类的实例才可以调用的。对应的有+号， 代表是类的静态方法，不需要实例化即可调用。 123456789101112131415161718192021222324252627282930313233343536373839404142434445//ClassA.h#import &lt;Foundation/NSObject.h&gt; static int count;@interface ClassA: NSObject+(int) initCount;+(void) initialize;@end//ClassA.m#import &quot;ClassA.h&quot;@implementation ClassA-(id) init&#123;_self = [super init];count++;return _self;&#125;+(int) initCount&#123;return count;&#125;+(void) initialize&#123;count = 0;&#125;@endmain.m#import &quot;ClassA.h&quot;#import &lt;stdio.h&gt;int main( int argc, const char *argv[] )&#123;ClassA *c1 = [[ClassA alloc] init];ClassA *c2 = [[ClassA alloc] init];// print countprintf( &quot;ClassA count: %i\n&quot;, [ClassA initCount] );ClassA *c3 = [[ClassA alloc] init];// print count againprintf( &quot;ClassA count: %i\n&quot;, [ClassA initCount] );[c1 release];[c2 release];[c3 release];return 0;&#125;output:ClassA count: 2ClassA count: 3 类方法用类名访问，实例方法用示例名访问。静态方法可以直接调用,实例方法要先成生实例,通过实例调用方法，静态速度很快，但是多了会占内存。静态内存是连续的,因为是在程序开始时就生成了,而实例申请的是离散的空间,所以当然没有静态方法快，而且静态内存是有限制的，太多了程序会启动不了。 类方法可以计算一个实体被instance几次，还可以共享数据，它不需要访问或者修改某个实例的成员变量。类方法一般用于实现一些工具方法，比如对某个对象进行扩展，或者实现单例。如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。 插入一点:windows要通过各种各样的句柄来标识诸如应用程序实例，窗口，图标菜单等对象。句柄的实际值对程序来讲无光紧要，这个值是用来引用相应对象的。句柄与普通指针的区别在于，指针包含的是引用对象的内存地址，而句柄则是由系统所管理的引用标识，该标识可以被系统重新定位到一个内存地址上。这种间接访问对象的模式增强了系统对引用对象的控制。 这里留给异常继承多态以及其他实体导向功能ID类型 Objective-C有一种id的类型，操作有些像void*，不过它却严格规定只能用在实体上。Objective-C与Java、C++不一样，在调用一个实体的方法时，并不需要知道这个实体的类型。当然，这个方法一定要存在，在称为Objective-C的消息传递。这种动态连接有显而易见的好处。你不需要知道你调用的方法的那个实体是什么类型，如果这个实体对这个消息有反应，那就会调用这个方法。这也不会牵涉到一堆繁琐的类型转换，比如在Java里调用一个整形实体的.intValue()就要先转换，然后才能调用这个方法。 123id number;number=comp;[number print]; 继承 关于_self=[super init] ，下面一段代码 [super init]的作用：面向对象的体现，先利用父类的init方法为子类实例的父类部分属性初始化。在iOS下，所有的类都继承于NSObject，而NSObject的init方法很简单，就是return _self。当父类的初始化完成之后，即_self不为nil的情况下，就可以开始做子类的初始化了。 把[_self init]付给_self，防止父类release掉了self指向的空间并重新获得alloc了一块空间，如果[self init]alloc失败，则不执行if语句内容。 super作为消息接受者的实质：super并不是真正的指针，[super message]的实质是由self来接受父类的message。需要注意的是，[super message]中，message方法出现的self为[super message]语境中的self，即子类实例。 123456_self=[super init];if(_self)&#123; [_self setWidth:w height:h];&#125; return _self; 重要一点：if( self = [super init] )这是一种通常的建议写法，赋值并测零只是为了防止超类在初始化过程中发生改变，返回了不同的对象 注：所有self前面均无_，只是hexo的时候会报错，所以选择加上]]></content>
      <categories>
        <category>Objective-C</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>languish</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下搭建OC环境]]></title>
    <url>%2F2018%2F03%2F26%2FWindows%E4%B8%8B%E6%90%AD%E5%BB%BAOC%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装Objective-C编译器需安装文件地址：链接 ，密码是：lm8y 先安装OC的编译器，这里使用的是GNUstep，安装次序为：gnustep-msys-system、gnustep-core、gnustep-devel，我安装再d盘，下面路径皆以d盘开始 接着安装IDE，选择codeblocks作为IDE 配置开发环境 先进入setting-&gt;Compiler anddebugger…,进去之后选择GUN GCC Compiler，按copy按钮，将其重新命名为GUNstep MinGW Compiler，如下图： 这里一定要将selected compiler选择到GUNstep MinGW Compiler，然后点击set as default。勾选如图的两个选项。 然后在compiler flags旁边的other compiler options里面添加这句话：-fconstant-string-class=NSConstantString -std=c99 在linker setting中添加两个链接，分别链接到libgnustep-base.dll.a和libobjc.dll.a，我的GUNstep是安装在D盘，所以路径依次是：D:\GNUstep\GNUstep\System\Library\Libraries\libgnustep-base.dll.a 和D:\GNUstep\GNUstep\System\Library\Libraries\libobjc.dll.a 如下图： 指定搜索目录，Search directories，这里有两处需要指定，第一是compiler，将其设置为D:\GNUstep\GNUstep\System\Library\Headers 第二处是linker，将其设置为D:\GNUstep\GNUstep\System\Library\Libraries 这两个不能写为同一个路径。如下图： 添加Objective-C文件支持类型 进入Settings-&gt;Environment…，选择Files extension handling 添加*.m。如图： 然后新建一个项目，在project-&gt;project tree-&gt;categories…下面将*.m添加到source下，一定要注意前面使用; 分号分开的，如下图： 进入Settings-&gt;Editor…，选择Syntaxhighlighting，点击Filemasks….按钮，在弹出框尾部添加*.m 到文件类型。如图： 然后点击Keywords…按钮 (紧靠Filemasks…按钮) 添加下面Objective-C的关键字到EditKeywords列表中。如图： @interface @implementation @end @class @selector @protocol @public @protected @private id BOOL YES NO SEL nil NULL self 这就大体完成了。 测试部分 测试代码如下： 123456789101112131415#import &lt;Foundation/Foundation.h&gt;int main (int argc, const char *argv[])&#123; NSAutoreleasePool *pool =[[NSAutoreleasePool alloc] init]; NSLog(@&quot;%@&quot;,@&quot;hello world&quot;); [pool drain]; return 0;&#125; 测试之前要在工程目录下新建一个.m文件，然后在编译器中右键这个文件，选择两个选项，如下图： .h文件也必须选择上面这一步，而且在options下面一个选项properties里面，必须这样选择properties-&gt;advanced-&gt;compiler-&gt;variable里面改为objc，这时候编译才能通过 #一点补充 关于代码高亮：在setting-&gt;editor里面，选择Syntax highlighting，然后选择objective c，点击filemasks…然后添加*.m，注意，后面加上，号,如下图：]]></content>
      <categories>
        <category>Stall IDE</category>
      </categories>
      <tags>
        <tag>Objective-C</tag>
        <tag>Windows</tag>
        <tag>GNUstep</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一点makedown]]></title>
    <url>%2F2018%2F03%2F15%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0-makedown%2F</url>
    <content type="text"><![CDATA[先写一点自己可能用得上的语法 有几个#号就是几级标题 一级二级三级四级 这是&gt;加空格 两个&gt;加空格 一个号加空格表示强调，可以在句中表示强调不过要以什么符号开始，就以什么结束，例子这个是星号*，如果回车还是一样的格式，不想这样要这个格式，那就再回车一下 回车再*号就会是空心小圆圈 一个-减号也是一个小黑点这样 像这样-–，***变成一个分隔符 链接有两种形式： 行内式：链接可以用[]加上()这样来书写，[]中间写链接内容，()中间写链接地址 ​ 我博客链接 参考式：两个[]连起来 例子:我的博客 &lt;noblestaspiration.net&gt; 自动链接 三个`这个符号是代码区，紧跟在三个符号后面的是语言类型，可以写Python或者C啊这些 1234567#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;111111&lt;&lt;endl; return 0;&#125; 两个``中间写的内容会变成其他颜色，但是第一个符号要加上空格 这就是其他颜色 插入图片是![]（）其中[]中填的是图片名称，后面写的是路径加上图片的名称，名称一定要加上类型，比如.jpg什么的，下面插一张图片 这里是内容 一对&lt;&gt;里面写blockquote class=”blockquote-center”这是搞一个像留言板下面那样的一个区域然后后面再加上一对&lt;&gt;里面写/blockquote这样就行了 另外\反斜杠可以帮助插其他符号，下面的就是前面已经加上反斜杠了 + ` * _ {} [] () # + - . ! 多级列表： 这是第一级 在上一行回车再回车之后tab再-加上空格]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>makedown</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F15%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python常用模块集锦]]></title>
    <url>%2F2018%2F03%2F12%2FPython%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E9%9B%86%E9%94%A6%2F</url>
    <content type="text"><![CDATA[Python常用模块集锦 常用模块主要分为以下几类（缺失的后续再补充）： 时间转换 时间计算 序列化和反序列化：json，pickle 编解码：unicode，base64 加解密：md5，sha1，hmac_sha1，aes 常见装饰器： 计算执行时间装饰器 缓存装饰器 错误重试装饰器 延迟装饰器 尾递归优化装饰器 ini配置文件读取 代码整合如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308#!/usr/bin/env python# -*- coding: utf-8 -*-"""Created on 9/21/17 1:46 PM@author: Chen Liang@function: python常用模块集锦，util.py"""import timeimport datetimeimport ConfigParserimport astimport sysimport jsonimport pickleimport base64import hashlibfrom Crypto.Cipher import AESfrom binascii import b2a_hex, a2b_hexfrom functools import wrapsBEFORE = 1LATER = 2class CommonUtil(object): """Python通用单元：不好归类但常用的方法此处添加""" passclass TimeTransferUtil(object): """时间相关的常见转换方法""" class TimeUtil(object): """时间相关的常见计算方法""" @staticmethod def str_to_date(): passclass SerializeUtil(object): """序列化和反序列化：json, pickle""" @staticmethod def json_loads(json_str, encoding=None): try: obj = json.loads(s=json_str, encoding=encoding) return True, obj except ValueError as e: return False, str(e) except Exception as e: return False, str(e) @staticmethod def json_dumps(obj): try: json_str = json.dumps(obj=obj) return True, json_str except TypeError as e: return False, str(e) except Exception as e: return False, str(e) @staticmethod def pickle_loads(pickle_str): try: obj = pickle.loads(pickle_str) return True, obj except IndexError as e: return False, str(e) except Exception as e: return False, str(e) @staticmethod def pickle_dumps(obj): try: pickle_str = pickle.dumps(obj) return True, pickle_str except Exception as e: return False, str(e)class CodecUtil(object): """编解码相关常见方法：base64 unicode""" @staticmethod def base64_encode(data): try: return True, base64.b64encode(data) except TypeError as e: return False, str(e) except Exception as e: return False, str(e) @staticmethod def base64_decode(encoded_data): try: return True, base64.b64decode(encoded_data) except TypeError as e: return False, str(e) except Exception as e: return False, str(e) @staticmethod def to_unicode(s, encoding='utf-8'): return s if isinstance(s, unicode) else unicode(s, encoding) @staticmethod def unicode_to(unicode_s, encoding='utf-8'): return unicode_s.encode(encoding)class CryptoUtil(object): """加解密相关常见方法： md5 aes""" @staticmethod def md5(str_object): """md5""" m = hashlib.md5() m.update(str_object) return m.hexdigest() @staticmethod def aes_encrypt(s, key, salt, mode=AES.MODE_CBC): """ aes加密 :param s: 待加密字符串 :param key: 密钥 :param salt: 盐, 16bit eg. b'0000000101000000' :param mode: AES模式 :return: 加密后的字符串 """ cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt) n_text = s + ('\0' * (16 - (len(s) % 16))) return b2a_hex(cipher.encrypt(n_text)) @staticmethod def aes_decrypt(s, key, salt, mode=AES.MODE_CBC): """ aes解密 :param s: 待解密字符串 :param key: 密钥 :param salt: 盐, 16bit eg. b'0000000101000000' :param mode: AES模式 :return: 解密后的字符串 """ cipher = AES.new(hashlib.md5(key).hexdigest(), mode, salt) return cipher.decrypt(a2b_hex(s)).rstrip('\0')class TailRecurseException: """尾递归异常""" def __init__(self, args, kwargs): self.args = args self.kwargs = kwargsclass DecoratorUtil(object): """常见装饰器： 执行时间timeit，缓存cache，错误重试retry""" __cache_dict = &#123;&#125; @staticmethod def timeit(fn): """计算执行时间""" @wraps(fn) def wrap(*args, **kwargs): start = time.time() ret = fn(*args, **kwargs) end = time.time() print "@timeit: &#123;0&#125; tasks, &#123;1&#125; secs".format(fn.__name__, str(end - start)) return ret return wrap @staticmethod def __is_expired(entry, duration): """是否过期""" if duration == -1: return False return time.time() - entry['time'] &gt; duration @staticmethod def __compute_key(fn, args, kw): """序列化并求其哈希值""" key = pickle.dumps((fn.__name__, args, kw)) return hashlib.sha1(key).hexdigest() @classmethod def cache(cls, expired_time=-1): """ 缓存 :param expired_time: 过期时间，-1 表示不过期 :return: 返回缓存的结果或者计算的结果 """ def _cache(fn): @wraps(fn) def wrap(*args, **kwargs): key = cls.__compute_key(fn, args, kwargs) if key in cls.__cache_dict: if cls.__is_expired(cls.__cache_dict[key], expired_time) is False: return cls.__cache_dict[key]['value'] ret = fn(*args, **kwargs) cls.__cache_dict[key] = &#123; 'value': ret, 'time': time.time() &#125; return ret return wrap return _cache @staticmethod def retry(exceptions, retry_times=3, time_pause=3, time_offset=1): """ 错误重试 :param exceptions: 单个异常比如ValueError, 或者tuple,元组元素是异常，比如(ValueError, TypeError) :param retry_times: 重试次数 :param time_pause: 初始暂停时间 :param time_offset: 暂停时间的偏移倍数，默认不偏移 :return: 返回成功的值，或者重拾次数结束时抛出异常 """ def _retry(fn): @wraps(fn) def wrap(*args, **kwargs): retry_times_tmp, time_pause_tmp = retry_times, time_pause while retry_times_tmp &gt; 1: try: return fn(*args, **kwargs) except exceptions: time.sleep(time_pause_tmp) retry_times_tmp -= 1 time_pause_tmp *= time_offset return fn(*args, **kwargs) return wrap return _retry @staticmethod def delay(delay_time=3, mode=BEFORE): """ 延迟装饰器，支持在函数执行之前和之后加延时，如果想在前后同时加，可以使用两次装饰。 time.sleep只会阻塞当前线程不会阻塞整个进程，其它线程不受影响 :param delay_time: 延迟时间，是float类型 :param mode: 模式，指定是在函数执行之前加延时还是在执行之后加，值为BEFORE(1)或者LATER(2) :return: """ def _delay(fn): @wraps(fn) def wrap(*args, **kwargs): if mode == BEFORE: time.sleep(delay_time) ret = fn(*args, **kwargs) if mode == LATER: time.sleep(delay_time) return ret return wrap return _delay @staticmethod def tail_call_optimized(fn): """尾递归优化装饰器，如果被装饰函数不是尾递归函数则会报错""" @wraps(fn) def wrap(*args, **kwargs): f = sys._getframe() if f.f_back and f.f_back.f_back and f.f_back.f_back.f_code == f.f_code: raise TailRecurseException(args, kwargs) else: while True: try: return fn(*args, **kwargs) except TailRecurseException as e: args = e.args kwargs = e.kwargs return wrapclass IniConfigParserUtil(object): """ini配置文件读取""" def __init__(self, *file_names): """ init :param file_names: 包含多个元素的可迭代对象 """ self.config = ConfigParser.ConfigParser() for file_name in file_names: try: self.config.readfp(open(file_name, 'rb')) break except IOError: continue else: sys.exit('All files have failed to read') def get_string(self, section, option): return self.config.get(section, option) def get_int(self, section, option): return self.config.getint(section, option) def get_float(self, section, option): return self.config.getfloat(section, option) def get_boolean(self, section, option): return self.config.getboolean(section, option) def get_list(self, section, option): return ast.literal_eval(self.config.get(section, option)) def get_dict(self, section, option): return ast.literal_eval(self.config.get(section, option)) 缺失部分后续待添加，记得填坑。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>总结</tag>
      </tags>
  </entry>
</search>
